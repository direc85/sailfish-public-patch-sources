diff --git a/usr/share/maliit/plugins/com/jolla/HorizontalPredictionListView.qml b/usr/share/maliit/plugins/com/jolla/HorizontalPredictionListView.qml
index d0fa206..6260deb 100644
--- a/usr/share/maliit/plugins/com/jolla/HorizontalPredictionListView.qml
+++ b/usr/share/maliit/plugins/com/jolla/HorizontalPredictionListView.qml
@@ -3,10 +3,13 @@
 
 import QtQuick 2.6
 import Sailfish.Silica 1.0
+import "ichthyo_color_emojis"
+import "ichthyo_color_emojis/patch_ichthyo_emoji.js" as Emoji
 
 PredictionListView {
     id: view
 
+    property bool isEmojiKeyboard: false
     property real _buttonMargin: showRemoveButton ? Theme.itemSizeExtraSmall : Theme.paddingLarge
     readonly property real _maximumLabelWidth: width - (2 * Theme.paddingLarge)
 
@@ -27,8 +30,10 @@ PredictionListView {
 
     delegate: BackgroundItem {
         id: delegate
-
-        width: Theme.paddingLarge + label.width + view._buttonMargin
+        readonly property real activeWidth: image.visible ?
+                                                (image.width + Theme.paddingMedium) :
+                                                (label.width + Theme.paddingLarge)
+        width: activeWidth + view._buttonMargin
         height: view.height
 
         clip: marginAnimation.running
@@ -37,7 +42,13 @@ PredictionListView {
             if (view.showRemoveButton) {
                 view.showRemoveButton = false
             } else {
-                view.handler.select(model.text, model.index)
+                if (isEmojiKeyboard) {
+                    MInputMethodQuick.sendCommit(model.text)
+                    emojiConfig.saveRecently(model.text, model.index)
+                    positionViewAtIndex(model.index, ListView.Contain)
+                } else {
+                    view.handler.select(model.text, model.index)
+                }
             }
         }
 
@@ -51,8 +62,25 @@ PredictionListView {
             }
         }
 
+        Image {
+            id: image
+            x: Theme.paddingMedium
+            anchors.centerIn: parent
+            width: delegate.height - 3*Theme.paddingMedium
+            height: width
+            horizontalAlignment: Image.AlignHCenter
+            verticalAlignment: Image.AlignVCenter
+            asynchronous: true
+            source: (isEmojiKeyboard && !!emojiConfig) ?
+                        emojiConfig.getUrl(model.text, width, true) : ''
+            visible: source !== '' && status === Image.Ready
+            opacity: visible ? 1.0 : 0.0
+            Behavior on opacity { FadeAnimator { } }
+        }
+
         Label {
             id: label
+            visible: !image.visible
 
             x: Theme.paddingLarge
             width: Math.min(implicitWidth, view._maximumLabelWidth + Theme.paddingLarge - view._buttonMargin)
@@ -87,6 +115,10 @@ PredictionListView {
         }
     }
 
+    EmojiConfig {
+        id: emojiConfig
+    }
+
     Connections {
         target: Clipboard
         onTextChanged: {
diff --git a/usr/share/maliit/plugins/com/jolla/PasteInputHandler.qml b/usr/share/maliit/plugins/com/jolla/PasteInputHandler.qml
index 8be9607..65e90c8 100644
--- a/usr/share/maliit/plugins/com/jolla/PasteInputHandler.qml
+++ b/usr/share/maliit/plugins/com/jolla/PasteInputHandler.qml
@@ -4,6 +4,7 @@
 import QtQuick 2.0
 import Sailfish.Silica 1.0
 import Sailfish.Silica.private 1.0 as SilicaPrivate
+import "ichthyo_color_emojis"
 
 InputHandler {
     id: pasteHandler
@@ -29,6 +30,7 @@ InputHandler {
         TopItem {
             HorizontalPredictionListView {
                 id: horizontalList
+                isEmojiKeyboard: (!!keyboard && !!keyboard.layout && keyboard.layout.type === 'emojis')
 
                 handler: pasteHandler
                 model: suggestionModel
@@ -65,7 +67,14 @@ InputHandler {
         signal keyClick
 
         propertyName: "text"
-        strings: MInputMethodQuick.extensions.autoFillSuggestions || []
+
+        strings: (!!keyboard && !!keyboard.layout && keyboard.layout.type === 'emojis') ?
+                     emojiConfig.recentlyUsedList :
+                     (MInputMethodQuick.extensions.autoFillSuggestions || [])
+    }
+
+    EmojiConfig {
+        id: emojiConfig
     }
 
     function handleKeyClick() {
diff --git a/usr/share/maliit/plugins/com/jolla/Popper.qml b/usr/share/maliit/plugins/com/jolla/Popper.qml
index 66a1575..32d409a 100644
--- a/usr/share/maliit/plugins/com/jolla/Popper.qml
+++ b/usr/share/maliit/plugins/com/jolla/Popper.qml
@@ -29,6 +29,7 @@
 import QtQuick 2.0
 import com.jolla.keyboard 1.0
 import Sailfish.Silica 1.0
+import "ichthyo_color_emojis"
 
 Rectangle {
     id: popper
@@ -71,6 +72,7 @@ Rectangle {
         Repeater {
             model: accents
             PopperCell {
+                isEmoji: emoji
                 character: labelText
                 active: index === popper.activeCell
                 textVisible: popper.expanded || index === popper.activeCell
@@ -94,6 +96,10 @@ Rectangle {
         keyType: KeyType.PopupKey
     }
 
+    EmojiConfig {
+        id: emojiConfig
+    }
+
     states: [
         State {
             name: "active"
@@ -194,6 +200,11 @@ Rectangle {
         keyboard.inputHandler._handleKeyPress(inputKey)
         keyboard.inputHandler._handleKeyClick(inputKey)
         keyboard.inputHandler._handleKeyRelease(inputKey)
+
+        if (!!target.emojiVariations) {
+            emojiConfig.saveRecently(inputKey.text)
+            emojiConfig.saveVariation(accents.get(0).inputText, inputKey.text)
+        }
     }
 
     function setActiveCell(mouseX, mouseY) {
@@ -217,10 +228,12 @@ Rectangle {
         var accentString = (keyboard.inSymView || keyboard.inSymView2)
                            ? "" : keyboard.isShifted ? target.accentsShifted
                                                      : target.accents
+        var emojiVariations = (!!target.emojiVariations) ? target.emojiVariations : null
+        var useEmojis = emojiVariations !== null
 
         // calculate expanded position and make sure we stay inside the vkb area
-        var baseIndex = accentString.indexOf(target.text)
-        var itemCount = baseIndex >= 0 ? accentString.length : (accentString.length + 1)
+        var baseIndex = useEmojis ? 0 : accentString.indexOf(target.text)
+        var itemCount = useEmojis ? emojiVariations.length : (baseIndex >= 0 ? accentString.length : (accentString.length + 1))
         var middleCell = baseIndex >= 0 ? baseIndex : Math.floor(itemCount / 2)
 
         accentString = accentString.replace(target.text, "") // added back later
@@ -248,10 +261,17 @@ Rectangle {
 
         // TODO: support separate visual and input text on accents
         accents.clear()
-        for (var i = 0; i < accentString.length; ++i) {
-            accents.append({ "labelText": accentString.charAt(i), "inputText": accentString.charAt(i) })
+        for (var i = 0; i < itemCount; ++i) {
+            if (useEmojis) {
+                accents.append({ "emoji": true, "labelText": emojiVariations[i], "inputText": emojiVariations[i] })
+            } else {
+                accents.append({ "emoji": false, "labelText": accentString.charAt(i), "inputText": accentString.charAt(i) })
+            }
+        }
+
+        if (!useEmojis) {
+            accents.insert(activeCell, { "labelText": target.keyText, "inputText": target.text } )
         }
-        accents.insert(activeCell, { "labelText": target.keyText, "inputText": target.text } )
 
         // position content row so that the base character is visible and centered
         contentRow.x = popper.radius -
diff --git a/usr/share/maliit/plugins/com/jolla/PopperCell.qml b/usr/share/maliit/plugins/com/jolla/PopperCell.qml
index b205294..d658d5d 100644
--- a/usr/share/maliit/plugins/com/jolla/PopperCell.qml
+++ b/usr/share/maliit/plugins/com/jolla/PopperCell.qml
@@ -3,6 +3,8 @@
 
 import QtQuick 2.0
 import Sailfish.Silica 1.0
+import "ichthyo_color_emojis"
+import "ichthyo_color_emojis/patch_ichthyo_emoji.js" as Emoji
 
 Item {
     id: popperCell
@@ -10,11 +12,36 @@ Item {
     height: geometry.popperHeight
 
     property bool active
+    property bool isEmoji: false
     property alias character: textItem.text
-    property alias textVisible: textItem.visible
+    property bool textVisible
+
+    EmojiPlaceholder {
+        anchors.fill: image
+        icon: image
+        visible: enabled
+        enabled: textVisible && isEmoji
+        opacity: visible ? (popperCell.active ? 1.0 : 0.4) : 0.0
+        Behavior on opacity { FadeAnimator { } }
+    }
+
+    Image {
+        id: image
+        anchors.centerIn: parent
+        width: Math.min(parent.width, parent.height)
+        height: width
+        horizontalAlignment: Image.AlignHCenter
+        verticalAlignment: Image.AlignVCenter
+        asynchronous: true
+        source: (isEmoji && !!emojiConfig) ? emojiConfig.getUrl(character, width, false) : ''
+        visible: textVisible && isEmoji && status === Image.Ready
+        opacity: visible ? (popperCell.active ? 1.0 : 0.4) : 0.0
+        Behavior on opacity { FadeAnimator { } }
+    }
 
     Text {
         id: textItem
+        visible: textVisible && (!isEmoji || image.source === '')
         anchors.top: parent.top
         anchors.bottom: parent.bottom
         anchors.horizontalCenter: parent.horizontalCenter
@@ -28,4 +55,8 @@ Item {
         font.pixelSize: geometry.popperFontSize
         fontSizeMode: Text.Fit
     }
+
+    EmojiConfig {
+        id: emojiConfig
+    }
 }
diff --git a/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiConfig.qml b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiConfig.qml
new file mode 100644
index 0000000..1bff6e9
--- /dev/null
+++ b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiConfig.qml
@@ -0,0 +1,165 @@
+// This file is part of sfos-patch-keyboard-color-stock-emojis
+// SPDX-FileCopyrightText: 2021 Mirian Margiani
+// SPDX-License-Identifier: GPL-3.0-or-later
+import Sailfish.Silica 1.0
+import Nemo.Configuration 1.0
+import "patch_ichthyo_emoji.js" as Emoji
+
+ConfigurationGroup {
+    id: root
+    path: '/apps/sailor-emoji'
+
+    property string currentStyle: 'openmoji'
+    property var recentlyUsedList: []
+    property int layoutRows: 3
+    property int maxHistory: 30
+    property bool _initialized: false
+
+    signal variationChanged(var key)
+    signal variationsChanged
+
+    function init() {
+        Emoji.dataBaseDirectory = StandardPaths.genericData
+    }
+
+    function getUrl(emojiCharacter, width, noGrow, maxSize) {
+        if (!_initialized) init()
+        return Emoji.parseSingleUrl(emojiCharacter, width,
+                                    Emoji.Style[currentStyle],
+                                    (!!noGrow), (!!noGrow) ?
+                                        (maxSize !== undefined ? maxSize :width) :
+                                        undefined
+                                    ).text
+    }
+
+    function saveVariation(base, selected) {
+        variations.setValue(base, selected)
+    }
+
+    function getVariation(base) {
+        return variations.value(base, base)
+    }
+
+    function clearRecently() {
+        recentlyUsedConfig.value = []
+    }
+
+    function removeRecently(index) {
+        var list = recentlyUsedConfig.value.slice()
+        list.splice(index, 1)
+        recentlyUsedConfig.value = list
+    }
+
+    function saveRecently(emoji, index) {
+        // We copy the selected emoji to the beginning of the
+        // list instead of moving it. The user may want to send the same
+        // emoji multiple times without having to move the view, but the
+        // selected emoji should still be promoted to the beginning of the list.
+
+        /*
+        click = click a suggestion, i.e. with index
+        add = normal key stroke, i.e. no index
+        (x) = inserted
+        [x] = removed
+        ...|... = the first part are 'favorites', the second part is the rest
+                  Emojis may be in the first and second part, but must not be
+                  duplicated inside of a part.
+
+        -empty-
+        add 1 (no index):       (1)
+        click 1:                1                       list was short, fill it
+        add 2-9-0:              1(2345|67890)           -"-
+        click 2:                12345|67890             2 was in first, skip
+        click 7:                (7)1234|56789[0]        7 was not in first, insert and shift
+        add x:                  (x)7123|45678[9]        x -"-
+        click 4:                (4)x712|34567[8]        4 -"-
+        add x:                  4x712|34567             x was in first, skip
+        add 2:                  4x712|34567             2 -"-
+        add 3:                  (3)4x71|2[3]456         3 was not in first, insert and deduplicate
+        click the second 4:     34x71|2456              4 was in first, skip
+        click the first 4:      34x71|2[4]56            4 was in first, deduplicate
+        */
+
+        var favoritesCount = Math.ceil(maxHistory/4)
+        var full = recentlyUsedList.slice() // copy
+
+        var keepAll = false
+        var insert = false
+        var deduplicate = false
+        var shrinkToBounds = true
+        var first = full.slice(0, favoritesCount)
+        var rest = full.slice(favoritesCount)
+
+        if (full.length <= favoritesCount) {
+            shrinkToBounds = false // don't, as there's nothing to shrink yet
+            if (full.indexOf(emoji) < 0) {
+                // insert the new emoji at the front and let the list grow
+                // over favoritesCount if it may
+                insert = true
+            } else {
+                keepAll = true // do nothing so the emoji keeps its position
+            }
+        } else {
+            // we assume any given index is correct, i.e. the emoji
+            // exists at this position; we skip `anyIndexOf(emoji)===index`
+            if (index >= 0) {
+                if (index < favoritesCount) { // in first
+                    // in first: remove any occurrence from the rest and keep the position in first
+                    deduplicate = true
+                } else if (index >= favoritesCount) { // in rest
+                    shrinkToBounds = false // don't, to make sure we don't lose an emoji
+                                           // (at the end of the list) that the user wanted to use
+                    if (first.indexOf(emoji) < 0) {
+                        // not in first: insert but keep in rest
+                        insert = true
+                    } else {
+                        // in rest and in first: keep everything
+                        keepAll = true
+                    }
+                }
+            } else { // no index given
+                if (first.indexOf(emoji) < 0) {
+                    // not in first: insert in first and deduplicate rest
+                    insert = true
+                    deduplicate = true
+                } else {
+                    // in first: deduplicate rest
+                    deduplicate = true
+                }
+            }
+        }
+
+        // Writing directly fails. We have to go through a separate
+        // ConfigurationValue, otherwise the new value will be ignored.
+        // setValue('recentlyUsedList', list)
+        function _dedup(e) { return e !== emoji }
+        var result = []
+        if (keepAll) {
+            result = first.concat(rest)
+        } else if (insert && !deduplicate) {
+            result = [emoji].concat(first, rest)
+        } else if (!insert && deduplicate) {
+            result = first.concat(rest.filter(_dedup))
+        } else if (insert && deduplicate) {
+            result = [emoji].concat(first, rest.filter(_dedup))
+        }
+
+        if (shrinkToBounds) recentlyUsedConfig.value = result.slice(0, maxHistory)
+        else recentlyUsedConfig.value = result
+    }
+
+    ConfigurationValue {
+        id: recentlyUsedConfig
+        key: '/apps/sailor-emoji/recentlyUsedList'
+        defaultValue: []
+    }
+
+    ConfigurationGroup {
+        id: variations
+        // key: base emoji
+        // value: last selected emoji variation
+        path: 'selected_variations'
+        onValueChanged: variationChanged(key)
+        onValuesChanged: variationsChanged()
+    }
+}
diff --git a/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiConfigOverlay.qml b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiConfigOverlay.qml
new file mode 100644
index 0000000..531a0f8
--- /dev/null
+++ b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiConfigOverlay.qml
@@ -0,0 +1,394 @@
+// This file is part of sfos-patch-keyboard-color-stock-emojis
+// SPDX-FileCopyrightText: 2021 Mirian Margiani
+// SPDX-License-Identifier: GPL-3.0-or-later
+import QtQuick 2.6
+import com.jolla.keyboard 1.0
+import Sailfish.Silica 1.0
+import "patch_ichthyo_emoji.js" as Emoji
+
+Item {
+    id: root
+    // do not set height from outside
+    // - if hidden: almost no height to not influence the keyboard height,
+    //   but still be picked up by the column layout
+    height: _closedHeight
+    width: parent.width
+    enabled: height === _openedHeight
+    Behavior on height { SmoothedAnimation { duration: 300 } }
+
+    readonly property string patchVersion: "1.0.0-1" // <-- change on update
+    property bool open: false // <-- change to show
+    property EmojiConfig emojiConfig: null // <-- set from outside
+    property real _closedHeight: 0.01
+    property real _openedHeight: ((MInputMethodQuick.appOrientation % 180 === 0) ?
+                                      Screen.height : Screen.width)
+
+    readonly property bool _haveRecently: !!emojiConfig && emojiConfig.recentlyUsedList.length > 0
+    property int _currentSelection: -1
+    signal emojiClicked(var index)
+
+    onEmojiClicked: _currentSelection = index
+    onOpenChanged: {
+        if (open) {
+            openAnim.from = height
+            openAnim.to = _openedHeight
+            openAnim.start()
+        } else {
+            openAnim.from = height
+            openAnim.to = _closedHeight
+            openAnim.start()
+        }
+    }
+    on_OpenedHeightChanged: {
+        if (open) {
+            openAnim.from = height
+            openAnim.to = _openedHeight
+            openAnim.start()
+        }
+    }
+
+    MouseArea {
+        anchors.fill: parent
+        preventStealing: true
+    }
+
+    Timer {
+        running: _currentSelection >= 0
+        interval: 2500
+        onTriggered: emojiClicked(-1) // reset selection
+    }
+
+    SmoothedAnimation {
+        id: openAnim
+        target: root
+        duration: 120
+        property: "height"
+        from: _closedHeight
+        to: _closedHeight
+        onStopped: if (!open) flick.scrollToTop()
+    }
+
+    Label {
+        id: closeLabelTop
+        anchors {
+            top: parent.top; topMargin: Theme.paddingLarge
+            horizontalCenter: parent.horizontalCenter
+        }
+        font.pixelSize: Theme.fontSizeLarge
+        color: Theme.secondaryColor
+        text: "Close"
+        opacity: flick.contentY > 0 ? 0.0 : (-1*flick.contentY)/250
+    }
+
+    Label {
+        id: closeLabelBottom
+        anchors {
+            bottom: parent.bottom; bottomMargin: Theme.paddingLarge
+            horizontalCenter: parent.horizontalCenter
+        }
+        font.pixelSize: Theme.fontSizeLarge
+        color: Theme.secondaryColor
+        text: "Close"
+        opacity: ((flick.contentY+flick.height)<flick.contentHeight)
+                 ? 0.0 : ((flick.contentY+flick.height)-flick.contentHeight)/250
+    }
+
+    SilicaFlickable {
+        id: flick
+        anchors.fill: parent
+        opacity: (open && !openAnim.running) ? 1.0 : 0.0
+        Behavior on opacity { FadeAnimator { duration: 200 } }
+        VerticalScrollDecorator { flickable: flick }
+        contentWidth: parent.width
+        contentHeight: column.height
+
+        boundsBehavior: Flickable.DragOverBounds
+        onDraggingVerticallyChanged: {
+            if (contentY < -150 || contentY+height > contentHeight+150) {
+                scrollToTop()
+                open = false
+            }
+        }
+
+        Column {
+            id: column
+            width: parent.width
+            height: childrenRect.height
+
+            PageHeader {
+                id: header
+                title: "Emoji configuration"
+                description: "patch version %1".arg(patchVersion)
+
+                IconButton {
+                    parent: header.extraContent
+                    anchors { left: parent.left; verticalCenter: parent.verticalCenter }
+                    icon.source: "image://theme/icon-m-dismiss"
+                    onClicked: open = false
+                }
+            }
+
+            SectionHeader {
+                text: "Recently used"
+            }
+
+            Item {
+                width: parent.width - 2*Theme.paddingLarge
+                height: recentFlow.height
+                anchors.horizontalCenter: parent.horizontalCenter
+                visible: _haveRecently
+
+                Rectangle {
+                    anchors.fill: recentFlow
+                    color: "transparent"
+                    border.width: 2
+                    border.color: Theme.secondaryHighlightColor
+                    radius: Theme.paddingLarge
+                }
+
+                Flow {
+                    id: recentFlow
+                    width: parent.width
+                    spacing: Theme.paddingMedium
+                    padding: Theme.paddingMedium
+
+                    Repeater {
+                        model: !!emojiConfig ? emojiConfig.recentlyUsedList : []
+                        Item {
+                            id: emoji
+                            width: Theme.iconSizeSmallPlus
+                            height: width
+
+                            EmojiPlaceholder {
+                                anchors.fill: emojiIcon
+                                icon: emojiIcon
+                            }
+
+                            Image {
+                                id: emojiIcon
+                                anchors.fill: parent
+                                horizontalAlignment: Image.AlignHCenter
+                                verticalAlignment: Image.AlignVCenter
+                                asynchronous: true
+                                source: !!emojiConfig ? emojiConfig.getUrl(modelData, width,
+                                                                           true, Theme.iconSizeSmallPlus) : ''
+                                visible: status === Image.Ready && !removeButton.visible
+                                opacity: visible ? 1.0 : 0.0
+                                Behavior on opacity { FadeAnimator { } }
+
+                                MouseArea {
+                                    anchors.fill: parent
+                                    onClicked: emojiClicked(index)
+                                }
+                            }
+
+                            IconButton {
+                                id: removeButton
+                                anchors.centerIn: parent
+                                icon.source: "image://theme/icon-m-clear"
+                                onClicked: {
+                                    if (!emojiConfig) return
+                                    emojiIcon.visible = false // hide doomed
+                                    emojiClicked(-1) // reset selection
+                                    emojiConfig.removeRecently(index)
+                                }
+                                enabled: visible
+                                visible: _currentSelection === index
+                                opacity: visible ? 1.0 : 0.0
+                                Behavior on opacity { FadeAnimator { } }
+                            }
+                        }
+                    }
+                }
+            }
+
+            Label {
+                visible: !_haveRecently
+                width: parent.width - 2*Theme.horizontalPageMargin
+                wrapMode: Text.Wrap
+                font.pixelSize: Theme.fontSizeSmall
+                anchors.horizontalCenter: parent.horizontalCenter
+                text: "No recently used emojis have been collected yet."
+                color: Theme.secondaryHighlightColor
+            }
+
+            Item { visible: _haveRecently; width: parent.width; height: Theme.paddingLarge }
+
+            Button {
+                visible: _haveRecently
+                anchors.horizontalCenter: parent.horizontalCenter
+                text: "Clear recently used"
+                onClicked: if (!!emojiConfig) emojiConfig.clearRecently()
+            }
+
+            Item { width: parent.width; height: 2*Theme.paddingLarge }
+
+            SectionHeader {
+                text: "Emoji styles"
+            }
+
+            Label {
+                width: parent.width - 2*Theme.horizontalPageMargin
+                wrapMode: Text.Wrap
+                anchors.horizontalCenter: parent.horizontalCenter
+                textFormat: Text.StyledText
+                linkColor: Theme.secondaryColor
+                font.pixelSize: Theme.fontSizeSmall
+                text: "You have to manually download and install an emoji set before you can use it. " +
+                      "Please follow the instructions "+
+                      "<a href='https://gitlab.com/rubdos/whisperfish-wiki/-/blob/master/Emojis.md'>" +
+                      "in the Whisperfish wiki</a>."
+                color: Theme.secondaryHighlightColor
+                onLinkActivated: Qt.openUrlExternally(link)
+            }
+
+            Item { width: parent.width; height: Theme.paddingMedium }
+
+            Repeater {
+                model: {
+                    var keys = Object.keys(Emoji.Style)
+                    keys.splice(keys.indexOf('system'), 1)
+                    return keys
+                }
+                BackgroundItem {
+                    id: bgItem
+                    width: parent.width
+                    height: Theme.itemSizeSmall
+                    property string name: Emoji.Style[modelData].name
+                    property string type: modelData
+                    highlighted: down || (!!emojiConfig && type === emojiConfig.currentStyle)
+
+                    Label {
+                        anchors.centerIn: parent
+                        width: parent.width - 2*Theme.horizontalPageMargin
+                        text: bgItem.name
+                    }
+
+                    onClicked: {
+                        if (!!emojiConfig) emojiConfig.currentStyle = type
+                    }
+                }
+            }
+
+            // The ComboBox breaks the whole keyboard.
+            /* ComboBox {
+                id: stylesCombo
+                property var availableStyles: {
+                    var keys = Object.keys(Emoji.Style)
+                    keys.splice(keys.indexOf('system'), 1)
+                    ready = true
+                    // currentIndex = keys.indexOf(emojiConfig.currentStyle)
+                    return keys
+                }
+                property bool ready: false
+                width: parent.width
+                label: "Current style"
+                description: "Monochrome styles are not supported."
+                currentIndex: -1
+                menu: ContextMenu {
+                    property var __silica_applicationwindow_instance: {_dimScreen:false}
+                    Repeater {
+                        model: stylesCombo.availableStyles
+                        MenuItem {
+                            text: Emoji.Style[modelData].name; property string type: modelData
+                            Component.onCompleted: {
+                                if (emojiConfig.currentStyle === modelData) {
+                                    stylesCombo.currentIndex = index
+                                }
+                            }
+                        }
+                    }
+                }
+
+                onCurrentIndexChanged:  {
+                    if (!ready || currentIndex < 0 || !availableStyles) return
+                    emojiConfig.currentStyle = availableStyles[currentIndex]
+                }
+            } */
+
+            Item { width: parent.width; height: 2*Theme.paddingLarge }
+
+            SectionHeader {
+                text: "Keyboard layout"
+            }
+
+            Slider {
+                width: parent.width
+                anchors.horizontalCenter: parent.horizontalCenter
+                minimumValue: 2
+                maximumValue: 5
+                value: emojiConfig.layoutRows
+                stepSize: 1.0
+                valueText: "%1 rows".arg(value)
+                label: "Number of keyboard rows"
+                onReleased: {
+                    if (!emojiConfig) return
+                    // update as seldom as possible
+                    if (value !== emojiConfig.layoutRows) {
+                        emojiConfig.layoutRows = value
+                    }
+                }
+            }
+
+            Label {
+                width: parent.width - 2*Theme.horizontalPageMargin
+                wrapMode: Text.Wrap
+                font.pixelSize: Theme.fontSizeSmall
+                anchors.horizontalCenter: parent.horizontalCenter
+                text: "Adjust the number of keyboard rows to the number of rows " +
+                      "in your default keyboard. Switching between keyboards can be " +
+                      "slow if they have different heights."
+                color: Theme.secondaryHighlightColor
+            }
+
+            /*Item { width: parent.width; height: 1*Theme.paddingLarge }
+
+            Switch {
+                id: leftSwitch
+                onCheckedChanged: if (checked) rightSwitch.checked = false
+            }
+
+            Switch {
+                id: rightSwitch
+                onCheckedChanged: if (checked) leftSwitch.checked = false
+            }
+
+            Switch {
+                id: bothSwitch
+            }*/
+
+            Item { width: parent.width; height: 2*Theme.paddingLarge }
+
+            SectionHeader {
+                text: "About"
+            }
+
+            Label {
+                width: parent.width - 2*Theme.horizontalPageMargin
+                wrapMode: Text.Wrap
+                font.pixelSize: Theme.fontSizeExtraSmall
+                anchors.horizontalCenter: parent.horizontalCenter
+                textFormat: Text.StyledText
+                linkColor: Theme.secondaryColor
+                text: "Copyright 2021 Mirian Margiani<br>" +
+                      "The emoji keyboard patch is currently released under the terms of the " +
+                      "GNU GPL version 3 or later. The source code is available " +
+                      "<a href='https://github.com/ichthyosaurus/sailfish-public-patch-sources'>on Github</a>. " +
+                      "This is free software: you are free to change and redistribute it. " +
+                      "There is no warranty, to the extent permitted by law."
+                color: Theme.secondaryHighlightColor
+                onLinkActivated: Qt.openUrlExternally(link)
+            }
+
+            Item { width: parent.width; height: Theme.paddingLarge }
+
+            Button {
+                anchors.horizontalCenter: parent.horizontalCenter
+                text: "Close"
+                onClicked: open = false
+            }
+
+            Item { width: parent.width; height: Theme.horizontalPageMargin }
+        }
+    }
+}
diff --git a/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiGroupKey.qml b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiGroupKey.qml
new file mode 100644
index 0000000..17750a0
--- /dev/null
+++ b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiGroupKey.qml
@@ -0,0 +1,40 @@
+// This file is part of sfos-patch-keyboard-color-stock-emojis
+// SPDX-FileCopyrightText: 2021 Mirian Margiani
+// SPDX-License-Identifier: GPL-3.0-or-later
+import QtQuick 2.0
+import Sailfish.Silica 1.0
+import ".."
+
+EmojiKey {
+    id: key
+    repeat: false
+    key: Qt.Key_unknown
+    implicitWidth: punctuationKeyWidthNarrow
+    showPopper: false
+    separator: -1
+    showHighlight: false
+    commitText: false
+    emoji: '' // <--- usage: set this instead of text/caption
+    emojiConfig: null // <--- usage: has to be set by the layout
+
+    property bool isSelected: false
+    property real verticalOffset: 0
+
+    Rectangle {
+        id: bg
+        anchors {
+            margins: (key.height >= (key.width+2*Theme.paddingMedium)) ? Theme.paddingMedium : iconMargins/2
+            top: parent.top; topMargin: Theme.paddingMedium+verticalOffset
+            bottom: parent.bottom; bottomMargin: Theme.paddingMedium // not (-verticalOffset) to keep it aligned
+            left: parent.left; leftMargin: iconMargins/2
+            right: parent.right; rightMargin: iconMargins/2
+        }
+        opacity: {
+            if (parent.pressed) 0.6
+            else if (isSelected) 0.35
+            else 0.17
+        }
+        color: parent.pressed ? Theme.highlightBackgroundColor : Theme.primaryColor
+        radius: geometry.keyRadius
+    }
+}
diff --git a/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiKey.qml b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiKey.qml
new file mode 100644
index 0000000..c0e1048
--- /dev/null
+++ b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiKey.qml
@@ -0,0 +1,89 @@
+// This file is part of sfos-patch-keyboard-color-stock-emojis
+// SPDX-FileCopyrightText: 2021 Mirian Margiani
+// SPDX-License-Identifier: GPL-3.0-or-later
+import QtQuick 2.0
+import com.jolla.keyboard 1.0
+import Sailfish.Silica 1.0
+import ".."
+import "patch_ichthyo_emoji.js" as Emoji
+
+CharacterKey {
+    id: key
+    keyType: KeyType.CharacterKey
+    text: commitText ? selectedEmoji : ''
+    keyText: ''
+    implicitWidth: punctuationKeyWidthNarrow
+    opacity: enabled ? (pressed ? 0.6 : 1.0) : 0.3
+    separator: enabled ? SeparatorState.AutomaticSeparator : -1
+    onEmojiChanged: refresh()
+
+    property string emoji: '' // <--- usage: set this instead of text/caption
+    property string selectedEmoji: emoji // handled internally
+    property var emojiVariations: [] // <--- usage: set this instead of accents
+    property bool commitText: true // whether to actually write the emoji
+    property EmojiConfig emojiConfig
+    readonly property real iconMargins: Theme.paddingSmall
+
+    function refresh() {
+        if (!emojiConfig) return
+        selectedEmoji = emojiConfig.getVariation(emoji)
+    }
+
+    onClicked: {
+        if (!commitText || !emojiConfig) return
+        emojiConfig.saveRecently(selectedEmoji)
+    }
+
+    Item {
+        anchors {
+            fill: parent
+            margins: iconMargins
+        }
+
+        EmojiPlaceholder {
+            anchors.fill: image
+            enabled: key.enabled
+            icon: image
+        }
+
+        Image {
+            id: image
+            anchors.centerIn: parent
+            width: Math.min(parent.width-leftPadding-rightPadding,
+                            parent.height-2*Theme.paddingSmall)
+            height: width
+            horizontalAlignment: Image.AlignHCenter
+            verticalAlignment: Image.AlignVCenter
+            asynchronous: true
+            source: (!!emojiConfig) ? emojiConfig.getUrl(selectedEmoji, width) : ''
+            visible: status === Image.Ready
+            opacity: visible ? 1.0 : 0.0
+            Behavior on opacity { FadeAnimator { } }
+        }
+    }
+
+    Item {
+        anchors {
+            fill: parent
+            verticalCenterOffset: -Theme.paddingSmall
+        }
+        clip: true
+        visible: !!emojiVariations && emojiVariations.length > 1 && key.enabled // more than the base variant
+        Rectangle {
+            opacity: key.pressed ? 0.6 : 0.17
+            color: key.pressed ? Theme.highlightBackgroundColor : Theme.primaryColor
+            width: Theme.paddingMedium * 1.5
+            height: width
+            rotation: 45
+            anchors {
+                verticalCenter: parent.bottom
+                horizontalCenter: parent.right
+            }
+        }
+    }
+
+    Connections {
+        target: emojiConfig
+        onVariationChanged: if (key === emoji) refresh()
+    }
+}
diff --git a/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiPlaceholder.qml b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiPlaceholder.qml
new file mode 100644
index 0000000..92b58c9
--- /dev/null
+++ b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/EmojiPlaceholder.qml
@@ -0,0 +1,33 @@
+// This file is part of sfos-patch-keyboard-color-stock-emojis
+// SPDX-FileCopyrightText: 2021 Mirian Margiani
+// SPDX-License-Identifier: GPL-3.0-or-later
+import QtQuick 2.0
+import Sailfish.Silica 1.0
+
+Item {
+    id: root
+    property Image icon
+    property bool enabled: true
+
+    Rectangle {
+        id: placeholder
+        anchors.fill: parent
+        radius: width
+        color: Theme.primaryColor
+        visible: enabled && icon.status !== Image.Ready
+        opacity: visible ? 0.16 : 0.0
+    }
+
+    Label {
+        text: '?'
+        anchors.centerIn: placeholder
+        visible: placeholder.visible && icon.status === Image.Null
+    }
+
+    Label {
+        text: '!'
+        font.bold: true
+        anchors.centerIn: placeholder
+        visible: placeholder.visible && icon.status === Image.Error
+    }
+}
diff --git a/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/patch_ichthyo_emoji.js b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/patch_ichthyo_emoji.js
new file mode 100644
index 0000000..6b60420
--- /dev/null
+++ b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/patch_ichthyo_emoji.js
@@ -0,0 +1,273 @@
+/*
+  Original license:
+
+  Copyright (c) 2018 Twitter, Inc and other contributors
+
+  Permission is hereby granted, free of charge, to any person obtaining a copy
+  of this software and associated documentation files (the "Software"), to deal
+  in the Software without restriction, including without limitation the rights
+  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+  copies of the Software, and to permit persons to whom the Software is
+  furnished to do so, subject to the following conditions:
+
+  The above copyright notice and this permission notice shall be included in
+  all copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+  THE SOFTWARE.
+/*
+
+/*! Copyright Twitter Inc. and other contributors. Licensed under MIT *//*
+  https://github.com/twitter/twemoji/blob/gh-pages/LICENSE
+
+  Modified and relicensed under AGPL v3+ for use in Whisperfish by Mirian Margiani (2021).
+  Based on: https://github.com/twitter/twemoji/blob/64b63c21b8a1524dd4bbfa112e826e76348a7219/v/13.0.1/twemoji.js
+
+  How to update:
+  - Update the source link.
+  - Update the regex (var re).
+  - Check if any of the variables/functions has changed. Currently used parts:
+    - variables: re, UFE0Fg, U200D
+    - functions: grabTheRightIcon, parseString (adapted), toCodePoint, parse (adapted)
+  - Update this guide if necessary.
+*/
+
+// +++ WF: ↓↓ Whisperfish configuration
+.pragma library // load the file only once
+// TODO: We should provide a way for users to download emoji sets to WF's directory
+//       in $HOME/.local/share (in-app for open sets, and a guide for proprietary sets).
+// TODO: We need an entry in the settings page to configure the emoji style.
+// TODO: handle missing icons/characters instead of showing an empty space
+// TODO: Is there a way to include official Signal emojis?
+
+// Data directories: emojis are by default located in StandardPaths.data/emojis,
+// which is typically $HOME/.local/share/sailor-emoji. The base directory has to
+// be initialized from QML, as this script cannot access the StandardPaths object.
+var dataBaseDirectory = '' // e.g. /home/nemo/.local/share; base path to emoji sources
+var emojiSubDirectory = 'sailor-emoji' // subdirectory below DataBaseDirectory
+
+// Emoji styles: emojis can be in raster or vector format. Raster emojis are
+// required in multiple resolutions.
+// Path: base/subdir/<style>/<version>/[<resolution>/]<codepoint>.<ext>
+var Style = { // could be initialized on startup with user-configured values
+    'openmoji': { name: 'OpenMoji', dir: 'openmoji/13.0.0', ext: 'svg', type: 'v' }, // CC-BY-SA 4.0
+    'twemoji': { name: 'Twemoji', dir: 'twemoji/13.0.1', ext: 'svg', type: 'v' }, // CC-BY-SA 4.0
+    'whatsapp': { name: 'Whatsapp', dir: 'whatsapp/2.20.206.24', ext: 'png', type: 'r' }, // proprietary
+    'system': { name: 'System', dir: '', ext: '', type: 's' }
+}
+
+// Required raster resolutions: Qt cannot scale inline images up, only down.
+// Sizes available from Emojipedia: [160, 144, 120, 72, 60]; maybe [120, 60] is enough?
+//var rasterSizes = [144, 120, 72, 60] // decreasing
+var rasterSizes = [144, 72, 60] // decreasing
+var rasterSizesCache = {}
+
+// Styles are checked once (raster styles once per resolution) and the results
+// are cached. No emojis will be replaced if a style is not available,
+// i.e. the system font will be used. Emojis are always counted, though.
+var styleStatusCache = {}
+
+function checkStyle(path, style) {
+  // TODO This is a hack and should be implemented in rust for better checks
+  // and better performance. Ideally we should check if a set is complete...
+  if (styleStatusCache.hasOwnProperty(path)) {
+    return styleStatusCache[path];
+  }
+  if (style.dir === '') { // use system font
+      styleStatusCache[path] = false;
+      return false;
+  }
+
+  var cleanPath = path;
+  if (/^file:\/\//.test(path)) cleanPath = path.substr(7);
+  var xhr = new XMLHttpRequest, success = false;
+  xhr.open("GET", cleanPath+'/2764.'+style.ext, false); // fetch 'heart' synchronously
+  xhr.send();
+
+  if (xhr.status === 200) success = true;
+  if (!success) console.error("failed to load emoji style at", cleanPath+'/2764.'+style.ext);
+  styleStatusCache[path] = success;
+  return success;
+}
+// +++ WF: ↑↑ Whisperfish configuration
+
+// +++ WF: added 'var', removed comma
+// RegExp based on emoji's official Unicode standards
+// http://www.unicode.org/Public/UNIDATA/EmojiSources.txt
+var re = /(?:\ud83d\udc68\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc68\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc68\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1|\ud83d\udc6b\ud83c[\udffb-\udfff]|\ud83d\udc6c\ud83c[\udffb-\udfff]|\ud83d\udc6d\ud83c[\udffb-\udfff]|\ud83d[\udc6b-\udc6d])|(?:\ud83d[\udc68\udc69]|\ud83e\uddd1)(?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf7c\udf84\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92]|\ud83e[\uddaf-\uddb3\uddbc\uddbd])|(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75]|\u26f9)((?:\ud83c[\udffb-\udfff]|\ufe0f)\u200d[\u2640\u2642]\ufe0f)|(?:\ud83c[\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc70\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6]|\ud83e[\udd26\udd35\udd37-\udd39\udd3d\udd3e\uddb8\uddb9\uddcd-\uddcf\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|(?:\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc15\u200d\ud83e\uddba|\ud83d\udc3b\u200d\u2744\ufe0f|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f|\ud83d\udc08\u200d\u2b1b)|[#*0-9]\ufe0f?\u20e3|(?:[©®\u2122\u265f]\ufe0f)|(?:\ud83c[\udc04\udd70\udd71\udd7e\udd7f\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u203c\u2049\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2697\u2699\u269b\u269c\u26a0\u26a1\u26a7\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|(?:\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd0c\udd0f\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\udd77\uddb5\uddb6\uddb8\uddb9\uddbb\uddcd-\uddcf\uddd1-\udddd]|[\u270a\u270b]))(?:\ud83c[\udffb-\udfff])?|(?:\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\uded5-\uded7\udeeb\udeec\udef4-\udefc\udfe0-\udfeb]|\ud83e[\udd0d\udd0e\udd10-\udd17\udd1d\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd3f-\udd45\udd47-\udd76\udd78\udd7a-\uddb4\uddb7\uddba\uddbc-\uddcb\uddd0\uddde-\uddff\ude70-\ude74\ude78-\ude7a\ude80-\ude86\ude90-\udea8\udeb0-\udeb6\udec0-\udec2\uded0-\uded6]|[\u23e9-\u23ec\u23f0\u23f3\u267e\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a])|\ufe0f/g
+
+// +++ WF: added 'var', removed comma
+// avoid runtime RegExp creation for not so smart,
+// not JIT based, and old browsers / engines
+var UFE0Fg = /\uFE0F/g
+
+// +++ WF: added 'var', removed comma
+// avoid using a string literal like '\u200D' here because minifiers expand it inline
+var U200D = String.fromCharCode(0x200D)
+
+// +++ WF: unchanged
+function replace(text, callback) {
+  return String(text).replace(re, callback);
+}
+
+// +++ WF: unchanged
+/**
+ * Used to both remove the possible variant
+ *  and to convert utf16 into code points.
+ *  If there is a zero-width-joiner (U+200D), leave the variants in.
+ * @param   string    the raw text of the emoji match
+ * @return  string    the code point
+ */
+function grabTheRightIcon(rawText) {
+  // if variant is present as \uFE0F
+  return toCodePoint(rawText.indexOf(U200D) < 0 ?
+    rawText.replace(UFE0Fg, '') :
+    rawText
+  );
+}
+
+// +++ WF: Removed extra attributes handling, and replaced injected HTML.
+/**
+ * String/HTML version of the same logic / parser:
+ *  emojify a generic text placing images tags instead of surrogates pair.
+ * @param   string    generic string with possibly some emoji in it
+ * @param   Object    options  containing info about how to parse
+ *
+ *            .callback   Function  the callback to invoke per each found emoji.
+ *            .base       string    the base url, by default twemoji.base
+ *            .ext        string    the image extension, by default twemoji.ext
+ *            .size       string    the assets size, by default twemoji.size
+ *
+ * @return  the string with <img tags> replacing all found and parsed emoji
+ *
+ */
+function parseString(str, options) {
+  var emojiCount = 0, plainCount = 0; // +++ WF: added
+  var ret = replace(str, function (rawText) { // +++ WF: don't return immediately
+    var
+      ret = options.includePlain ? rawText : '',
+      iconId = grabTheRightIcon(rawText),
+      src = options.callback(iconId, options);
+    if (iconId && src) {
+      // recycle the match string replacing the emoji
+      // with its image counter part
+      // +++ WF: Replaced injected HTML code.
+      ret = options.asMarkup ? '<img '.concat(
+        'src="',
+        src,
+        '" align="middle" width="',
+        options.size,
+        '" height="',
+        options.size,
+        '"/>'
+      ) : src;
+      // +++ WF: Removed extra attributes handling
+      emojiCount++; // +++ WF: added counting
+    } else {
+      emojiCount++; // +++ WF: count even if the system font is used
+    }
+    return ret;
+  });
+  plainCount = String(str).replace(re, '').length; // +++ WF: remove emojis
+  return { 'emojiCount': emojiCount, 'plainCount': plainCount, 'text': ret}; // +++ WF: added
+}
+
+// +++ WF: unchanged
+function toCodePoint(unicodeSurrogates, sep) {
+  var
+    r = [],
+    c = 0,
+    p = 0,
+    i = 0;
+  while (i < unicodeSurrogates.length) {
+    c = unicodeSurrogates.charCodeAt(i++);
+    if (p) {
+      r.push((0x10000 + ((p - 0xD800) << 10) + (c - 0xDC00)).toString(16));
+      p = 0;
+    } else if (0xD800 <= c && c <= 0xDBFF) {
+      p = c;
+    } else {
+      r.push(c.toString(16));
+    }
+  }
+  return r.join(sep || '-');
+}
+
+function parseAsMarkup(what, size, style, noGrow, maxRasterSize) {
+    return parse(what, size, style, noGrow, maxRasterSize, true, true)
+}
+
+function parseSingleUrl(what, size, style, noGrow, maxRasterSize) {
+    return parse(what, size, style, noGrow, maxRasterSize, false, false)
+}
+
+// +++ WF: Adapted from the original parse(what, how) function.
+function parse(what, size, style, noGrow, maxRasterSize, includePlain, asMarkup) {
+  var sourceSize = -1, stylePath = '', useSystem = false, effectiveSize = 0;
+  if (noGrow === true) {
+    effectiveSize = Math.round(size);
+  } else {
+    effectiveSize = Math.round(1.15*size);
+  }
+
+  if (style.type === 'r' /* raster */) {
+    if (maxRasterSize > 0) {
+      effectiveSize = maxRasterSize
+    }
+
+    // We have to choose the best source resolution for raster emojis.
+    // Qt only supports downscaling of inline images, so we select the
+    // closest resolution above the desired size.
+
+    var cached = rasterSizesCache[effectiveSize]
+    if (cached !== undefined) {
+      sourceSize = cached.source
+      stylePath = cached.path
+      effectiveSize = cached.effective
+    } else {
+      var key = effectiveSize
+      // Reset the desired size to the largest available size.
+      if (effectiveSize > rasterSizes[0]) effectiveSize = rasterSizes[0]
+
+      for (var i in rasterSizes) {
+        // Select the new size if it is >= the desired size.
+        if (rasterSizes[i] >= effectiveSize) sourceSize = rasterSizes[i]
+      }
+
+      // Reset the source size to the smallest available size if none was found.
+      // Reset the effective size if the fallback resolution too small.
+      if (sourceSize < 0) sourceSize = rasterSizes[rasterSizes.length-1]
+      if (effectiveSize > sourceSize) effectiveSize = sourceSize
+
+      stylePath = Qt.resolvedUrl(''.concat(dataBaseDirectory, '/', emojiSubDirectory, '/',
+                                           style.dir, '/', sourceSize))
+
+      // cache the result using the original effectiveSize as key
+      rasterSizesCache[key] = {source: sourceSize, effective: effectiveSize, path: stylePath}
+    }
+  } else if (style.type === 's') {
+    useSystem = true
+  } else {
+    stylePath = Qt.resolvedUrl(''.concat(dataBaseDirectory, '/', emojiSubDirectory, '/',
+                                         style.dir))
+  }
+
+  if (!useSystem && !checkStyle(stylePath, style)) {
+      useSystem = true;
+  }
+
+  return parseString(what, {
+    callback: function(icon, options) {
+      if (useSystem) return null
+      else return ''.concat(stylePath, '/', icon, '.', style.ext)
+    },
+    size: effectiveSize,
+    includePlain: (includePlain !== false),
+    asMarkup: (asMarkup !== false)
+  });
+}
diff --git a/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/qmldir b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/qmldir
new file mode 100644
index 0000000..706e72e
--- /dev/null
+++ b/usr/share/maliit/plugins/com/jolla/ichthyo_color_emojis/qmldir
@@ -0,0 +1,2 @@
+EmojiGroupKey 1.0 EmojiGroupKey.qml
+EmojiKey 1.0 EmojiKey.qml
diff --git a/usr/share/maliit/plugins/com/jolla/layouts/emojis.qml b/usr/share/maliit/plugins/com/jolla/layouts/emojis.qml
index 3580703..37d5ac5 100644
--- a/usr/share/maliit/plugins/com/jolla/layouts/emojis.qml
+++ b/usr/share/maliit/plugins/com/jolla/layouts/emojis.qml
@@ -27,73 +27,222 @@
  *
  */
 
+// Modified for sfos-patch-keyboard-color-stock-emojis
+// SPDX-FileCopyrightText: 2021 Mirian Margiani
+// SPDX-License-Identifier: GPL-3.0-or-later
+
 import QtQuick 2.0
 import com.jolla.keyboard 1.0
+import Sailfish.Silica 1.0
 import ".."
+import "../ichthyo_color_emojis"
+import "patch_ichthyo_emoji_data.js" as EmojiData
 
 KeyboardLayout {
-    splitSupported: true
+    id: root
+    splitSupported: false
+    capsLockSupported: false
+    onCurrentCategoryChanged: currentPage = 0
+    type: 'emojis' // plural
 
-    KeyboardRow {
-        CharacterKey { caption: "☺" }
-        CharacterKey { caption: "😉" }
-        CharacterKey { caption: "😊" }
-        CharacterKey { caption: "😎" }
-        CharacterKey { caption: "😃" }
-        CharacterKey { caption: "😄" }
-        CharacterKey { caption: "😆" }
-        CharacterKey { caption: "😀" }
-        CharacterKey { caption: "😁" }
-        CharacterKey { caption: "😂" }
+    property string currentCategory: 'smileys-emotion'
+    property int currentPage: 0
+
+    readonly property int lessKeysInLastRow: 6
+    readonly property int keysPerRow: Math.ceil(root.width/emojiKeyWidth)
+    readonly property int keysPerPage: keysPerRow*4 - lessKeysInLastRow
+    readonly property real emojiKeyWidth: punctuationKeyWidthNarrow
+    readonly property int pageCount: Math.ceil(EmojiData.list[currentCategory].length / keysPerPage)
+    readonly property int pageIndicatorHeight: 4
+
+    function showConfigOverlay() {
+        if (!configOverlayLoader.item) return
+        configOverlayLoader.item.open = true
     }
 
-    KeyboardRow {
-        splitIndex: 5
-
-        CharacterKey { caption: "😮" }
-        CharacterKey { caption: "😐" }
-        CharacterKey { caption: "😛" }
-        CharacterKey { caption: "😜" }
-        CharacterKey { caption: "😕" }
-        CharacterKey { caption: "😞" }
-        CharacterKey { caption: "😢" }
-        CharacterKey { caption: "😭" }
-        CharacterKey { caption: "😠" }
-        CharacterKey { caption: "😣" }
+    function defaultFor(what, fallback) {
+        return (what === '' || typeof what === 'undefined') ? fallback : what
+    }
+
+    function showPreviousPage() {
+        if (currentPage === 0) currentPage = pageCount-1
+        else currentPage--
+    }
+
+    function showNextPage() {
+        if (currentPage === pageCount-1) currentPage = 0
+        else currentPage++
+    }
+
+    // TODO:
+    // x license
+    // x config button
+    // x configure style
+    // x only show suggestions for the emoji keyboard, not with disabled input method hint
+    // x fix popper highlight
+    // x save last used emojis
+    // x save and show last used variations
+    // x show last used emojis in suggestion bar
+    // x show icons in suggestion bar
+    // x variations
+    // x fix missing emojis
+    // o split -- no: would require too many patches
+    // o page for last used -- no: use suggestion bar
+
+    Timer {
+        id: pageRepeatTimer
+        repeat: true
+        interval: 200
+        running: prevKey.pressed || nextKey.pressed
+        onTriggered: {
+            if (prevKey.pressed) showPreviousPage()
+            else if (nextKey.pressed) showNextPage()
+            else stop()
+        }
+    }
+
+    EmojiConfig {
+        id: emojiConfigItem
+    }
+
+    Repeater {
+        id: mainRowsRepeater
+        model: emojiConfigItem.layoutRows - 1
+        KeyboardRow {
+            separateButtonSizes: true
+            property int rowIndex: index
+            Repeater {
+                model: keysPerRow
+                EmojiKey {
+                    property int emojiIndex: currentPage*keysPerPage + parent.rowIndex*keysPerRow + index
+                    property var keyData: defaultFor(EmojiData.list[currentCategory][emojiIndex], {e:''})
+                    emoji: !!keyData ? keyData.e : ''
+                    emojiConfig: emojiConfigItem
+                    emojiVariations: !!keyData ? keyData.opts : []
+                    enabled: emoji !== ''
+                }
+            }
+        }
     }
 
     KeyboardRow {
-        splitIndex: 5
-
-        FittedCharacterKey { caption: "😴" }
-        CharacterKey { caption: "😙" }
-        CharacterKey { caption: "😘" }
-        CharacterKey { caption: "😍" }
-        CharacterKey { caption: "💋" }
-        CharacterKey { caption: "❤" }
-        CharacterKey { caption: "👍" }
-        CharacterKey { caption: "💪" }
-        CharacterKey { caption: "👏" }
-        CharacterKey { caption: "👋" }
+        id: lastEmojiRow
+        separateButtonSizes: true
+        property int rowIndex: mainRowsRepeater.count
+
+        FunctionKey {
+            id: prevKey
+            icon.source: "image://theme/icon-m-left" + (pressed ? ("?" + Theme.highlightColor) : "")
+            repeat: true
+            key: Qt.Key_unknown
+            implicitWidth: shiftKeyWidth
+            background.visible: false
+            onClicked: {
+                pageRepeatTimer.stop()
+                showPreviousPage()
+            }
+        }
+
+        FunctionKey {
+            id: nextKey
+            icon.source: "image://theme/icon-m-right" + (pressed ? ("?" + Theme.highlightColor) : "")
+            repeat: true
+            key: Qt.Key_unknown
+            implicitWidth: emojiKeyWidth
+            background.visible: false
+            onClicked: {
+                pageRepeatTimer.stop()
+                showNextPage()
+            }
+        }
+
+        Repeater {
+            model: keysPerRow - lessKeysInLastRow
+            EmojiKey {
+                property int emojiIndex: currentPage*keysPerPage + parent.rowIndex*keysPerRow + index
+                property var keyData: defaultFor(EmojiData.list[currentCategory][emojiIndex], {e:''})
+                emoji: !!keyData ? keyData.e : ''
+                emojiConfig: emojiConfigItem
+                emojiVariations: !!keyData ? keyData.opts : []
+                enabled: emoji !== ''
+            }
+        }
+
+        FunctionKey { // config button
+            repeat: false
+            key: Qt.Key_unknown
+            implicitWidth: punctuationKeyWidth
+            background.visible: false
+            // TODO Remove the highlight hack once FunctionKey uses Icon instead of Image
+            icon.source: "image://theme/icon-lock-settings" + (pressed ? ("?" + Theme.highlightColor) : "")
+            onClicked: showConfigOverlay()
+        }
+
+        BackspaceKey {}
+    }
+
+    Item {
+        width: parent.width
+        height: 0.01 // almost no height to not influence the keyboard height,
+                     // but still be picked up by the column layout
+        Row {
+            height: pageIndicatorHeight
+            anchors {
+                horizontalCenter: parent.horizontalCenter
+                bottom: parent.bottom
+                bottomMargin: -height-Theme.paddingSmall
+            }
+            spacing: Theme.paddingSmall
+            Repeater {
+                model: pageCount
+                Rectangle {
+                    height: pageIndicatorHeight
+                    width: Theme.paddingLarge
+                    opacity: index === currentPage ? 0.6 : 0.17
+                    color: index === currentPage ? Theme.highlightBackgroundColor : Theme.primaryColor
+                }
+            }
+        }
     }
 
     KeyboardRow {
-        splitIndex: 2
+        id: bottomRow
+        separateButtonSizes: true
 
         FunctionKey {
+            // The language switcher popup is bound to the space key.
+            // See KeyboardBase.qml for the relevant implementation.
+            key: Qt.Key_Space
             caption: "ABC"
-            implicitWidth: functionKeyWidth
+            implicitWidth: shiftKeyWidth
             keyType: KeyType.SymbolKey
-
             onClicked: canvas.switchToPreviousCharacterLayout()
         }
-        SpacebarKey {}
-        SpacebarKey {
-            active: splitActive
-            languageLabel: ""
+
+        Repeater {
+            model: EmojiData.groups
+            EmojiGroupKey {
+                emoji: modelData.i
+                isSelected: modelData.n === currentCategory
+                onClicked: currentCategory = modelData.n
+                verticalOffset: pageIndicatorHeight
+                emojiConfig: emojiConfigItem
+            }
+        }
+
+        EnterKey {
+            implicitWidth: shiftKeyWidth
         }
-        EnterKey {}
-        BackspaceKey {}
     }
-}
 
+    Loader {
+        id: configOverlayLoader
+        asynchronous: true
+        sourceComponent: Component {
+            EmojiConfigOverlay {
+                width: parent.width
+                emojiConfig: emojiConfigItem
+            }
+        }
+    }
+}
diff --git a/usr/share/maliit/plugins/com/jolla/layouts/patch_ichthyo_emoji_data.js b/usr/share/maliit/plugins/com/jolla/layouts/patch_ichthyo_emoji_data.js
new file mode 100644
index 0000000..174a01d
--- /dev/null
+++ b/usr/share/maliit/plugins/com/jolla/layouts/patch_ichthyo_emoji_data.js
@@ -0,0 +1,2 @@
+var groups = [{n:"smileys-emotion",i:"🙂"},{n:"people-body",i:"👋"},{n:"animals-nature",i:"🐶"},{n:"food-drink",i:"🍏"},{n:"travel-places",i:"🌍"},{n:"activities",i:"🎉"},{n:"objects",i:"🖨"},{n:"symbols",i:"☮"},{n:"flags",i:"🚩"}]
+var list = {"smileys-emotion":[{"e":"😀","opts":["😀"]},{"e":"😃","opts":["😃"]},{"e":"😄","opts":["😄"]},{"e":"😁","opts":["😁"]},{"e":"😆","opts":["😆"]},{"e":"😅","opts":["😅"]},{"e":"🤣","opts":["🤣"]},{"e":"😂","opts":["😂"]},{"e":"🙂","opts":["🙂"]},{"e":"🙃","opts":["🙃"]},{"e":"😉","opts":["😉"]},{"e":"😊","opts":["😊"]},{"e":"😇","opts":["😇"]},{"e":"🥰","opts":["🥰"]},{"e":"😍","opts":["😍"]},{"e":"🤩","opts":["🤩"]},{"e":"😘","opts":["😘"]},{"e":"😗","opts":["😗"]},{"e":"☺️","opts":["☺️"]},{"e":"😚","opts":["😚"]},{"e":"😙","opts":["😙"]},{"e":"🥲","opts":["🥲"]},{"e":"😋","opts":["😋"]},{"e":"😛","opts":["😛"]},{"e":"😜","opts":["😜"]},{"e":"🤪","opts":["🤪"]},{"e":"😝","opts":["😝"]},{"e":"🤑","opts":["🤑"]},{"e":"🤗","opts":["🤗"]},{"e":"🤭","opts":["🤭"]},{"e":"🤫","opts":["🤫"]},{"e":"🤔","opts":["🤔"]},{"e":"🤐","opts":["🤐"]},{"e":"🤨","opts":["🤨"]},{"e":"😐️","opts":["😐️"]},{"e":"😑","opts":["😑"]},{"e":"😶","opts":["😶"]},{"e":"😏","opts":["😏"]},{"e":"😒","opts":["😒"]},{"e":"🙄","opts":["🙄"]},{"e":"😬","opts":["😬"]},{"e":"🤥","opts":["🤥"]},{"e":"😌","opts":["😌"]},{"e":"😔","opts":["😔"]},{"e":"😪","opts":["😪"]},{"e":"🤤","opts":["🤤"]},{"e":"😴","opts":["😴"]},{"e":"😷","opts":["😷"]},{"e":"🤒","opts":["🤒"]},{"e":"🤕","opts":["🤕"]},{"e":"🤢","opts":["🤢"]},{"e":"🤮","opts":["🤮"]},{"e":"🤧","opts":["🤧"]},{"e":"🥵","opts":["🥵"]},{"e":"🥶","opts":["🥶"]},{"e":"🥴","opts":["🥴"]},{"e":"😵","opts":["😵"]},{"e":"🤯","opts":["🤯"]},{"e":"🤠","opts":["🤠"]},{"e":"🥳","opts":["🥳"]},{"e":"🥸","opts":["🥸"]},{"e":"😎","opts":["😎"]},{"e":"🤓","opts":["🤓"]},{"e":"🧐","opts":["🧐"]},{"e":"😕","opts":["😕"]},{"e":"😟","opts":["😟"]},{"e":"🙁","opts":["🙁"]},{"e":"☹️","opts":["☹️"]},{"e":"😮","opts":["😮"]},{"e":"😯","opts":["😯"]},{"e":"😲","opts":["😲"]},{"e":"😳","opts":["😳"]},{"e":"🥺","opts":["🥺"]},{"e":"😦","opts":["😦"]},{"e":"😧","opts":["😧"]},{"e":"😨","opts":["😨"]},{"e":"😰","opts":["😰"]},{"e":"😥","opts":["😥"]},{"e":"😢","opts":["😢"]},{"e":"😭","opts":["😭"]},{"e":"😱","opts":["😱"]},{"e":"😖","opts":["😖"]},{"e":"😣","opts":["😣"]},{"e":"😞","opts":["😞"]},{"e":"😓","opts":["😓"]},{"e":"😩","opts":["😩"]},{"e":"😫","opts":["😫"]},{"e":"🥱","opts":["🥱"]},{"e":"😤","opts":["😤"]},{"e":"😡","opts":["😡"]},{"e":"😠","opts":["😠"]},{"e":"🤬","opts":["🤬"]},{"e":"😈","opts":["😈"]},{"e":"👿","opts":["👿"]},{"e":"💀","opts":["💀"]},{"e":"☠️","opts":["☠️"]},{"e":"💩","opts":["💩"]},{"e":"🤡","opts":["🤡"]},{"e":"👹","opts":["👹"]},{"e":"👺","opts":["👺"]},{"e":"👻","opts":["👻"]},{"e":"👽️","opts":["👽️"]},{"e":"👾","opts":["👾"]},{"e":"🤖","opts":["🤖"]},{"e":"😺","opts":["😺"]},{"e":"😸","opts":["😸"]},{"e":"😹","opts":["😹"]},{"e":"😻","opts":["😻"]},{"e":"😼","opts":["😼"]},{"e":"😽","opts":["😽"]},{"e":"🙀","opts":["🙀"]},{"e":"😿","opts":["😿"]},{"e":"😾","opts":["😾"]},{"e":"🙈","opts":["🙈"]},{"e":"🙉","opts":["🙉"]},{"e":"🙊","opts":["🙊"]},{"e":"💋","opts":["💋"]},{"e":"💌","opts":["💌"]},{"e":"💘","opts":["💘"]},{"e":"💝","opts":["💝"]},{"e":"💖","opts":["💖"]},{"e":"💗","opts":["💗"]},{"e":"💓","opts":["💓"]},{"e":"💞","opts":["💞"]},{"e":"💕","opts":["💕"]},{"e":"💟","opts":["💟"]},{"e":"❣️","opts":["❣️"]},{"e":"💔","opts":["💔"]},{"e":"❤️","opts":["❤️"]},{"e":"🧡","opts":["🧡"]},{"e":"💛","opts":["💛"]},{"e":"💚","opts":["💚"]},{"e":"💙","opts":["💙"]},{"e":"💜","opts":["💜"]},{"e":"🤎","opts":["🤎"]},{"e":"🖤","opts":["🖤"]},{"e":"🤍","opts":["🤍"]},{"e":"💯","opts":["💯"]},{"e":"💢","opts":["💢"]},{"e":"💥","opts":["💥"]},{"e":"💫","opts":["💫"]},{"e":"💦","opts":["💦"]},{"e":"💨","opts":["💨"]},{"e":"🕳️","opts":["🕳️"]},{"e":"💣️","opts":["💣️"]},{"e":"💬","opts":["💬"]},{"e":"👁️‍🗨️","opts":["👁️‍🗨️"]},{"e":"🗨️","opts":["🗨️"]},{"e":"🗯️","opts":["🗯️"]},{"e":"💭","opts":["💭"]},{"e":"💤","opts":["💤"]}],"people-body":[{"e":"👋","opts":["👋","👋🏻","👋🏼","👋🏽","👋🏾","👋🏿"]},{"e":"🤚","opts":["🤚","🤚🏻","🤚🏼","🤚🏽","🤚🏾","🤚🏿"]},{"e":"🖐️","opts":["🖐️","🖐🏻","🖐🏼","🖐🏽","🖐🏾","🖐🏿"]},{"e":"✋","opts":["✋","✋🏻","✋🏼","✋🏽","✋🏾","✋🏿"]},{"e":"🖖","opts":["🖖","🖖🏻","🖖🏼","🖖🏽","🖖🏾","🖖🏿"]},{"e":"👌","opts":["👌","👌🏻","👌🏼","👌🏽","👌🏾","👌🏿"]},{"e":"🤌","opts":["🤌","🤌🏻","🤌🏼","🤌🏽","🤌🏾","🤌🏿"]},{"e":"🤏","opts":["🤏","🤏🏻","🤏🏼","🤏🏽","🤏🏾","🤏🏿"]},{"e":"✌️","opts":["✌️","✌🏻","✌🏼","✌🏽","✌🏾","✌🏿"]},{"e":"🤞","opts":["🤞","🤞🏻","🤞🏼","🤞🏽","🤞🏾","🤞🏿"]},{"e":"🤟","opts":["🤟","🤟🏻","🤟🏼","🤟🏽","🤟🏾","🤟🏿"]},{"e":"🤘","opts":["🤘","🤘🏻","🤘🏼","🤘🏽","🤘🏾","🤘🏿"]},{"e":"🤙","opts":["🤙","🤙🏻","🤙🏼","🤙🏽","🤙🏾","🤙🏿"]},{"e":"👈️","opts":["👈️","👈🏻","👈🏼","👈🏽","👈🏾","👈🏿"]},{"e":"👉️","opts":["👉️","👉🏻","👉🏼","👉🏽","👉🏾","👉🏿"]},{"e":"👆️","opts":["👆️","👆🏻","👆🏼","👆🏽","👆🏾","👆🏿"]},{"e":"🖕","opts":["🖕","🖕🏻","🖕🏼","🖕🏽","🖕🏾","🖕🏿"]},{"e":"👇️","opts":["👇️","👇🏻","👇🏼","👇🏽","👇🏾","👇🏿"]},{"e":"☝️","opts":["☝️","☝🏻","☝🏼","☝🏽","☝🏾","☝🏿"]},{"e":"👍️","opts":["👍️","👍🏻","👍🏼","👍🏽","👍🏾","👍🏿"]},{"e":"👎️","opts":["👎️","👎🏻","👎🏼","👎🏽","👎🏾","👎🏿"]},{"e":"✊","opts":["✊","✊🏻","✊🏼","✊🏽","✊🏾","✊🏿"]},{"e":"👊","opts":["👊","👊🏻","👊🏼","👊🏽","👊🏾","👊🏿"]},{"e":"🤛","opts":["🤛","🤛🏻","🤛🏼","🤛🏽","🤛🏾","🤛🏿"]},{"e":"🤜","opts":["🤜","🤜🏻","🤜🏼","🤜🏽","🤜🏾","🤜🏿"]},{"e":"👏","opts":["👏","👏🏻","👏🏼","👏🏽","👏🏾","👏🏿"]},{"e":"🙌","opts":["🙌","🙌🏻","🙌🏼","🙌🏽","🙌🏾","🙌🏿"]},{"e":"👐","opts":["👐","👐🏻","👐🏼","👐🏽","👐🏾","👐🏿"]},{"e":"🤲","opts":["🤲","🤲🏻","🤲🏼","🤲🏽","🤲🏾","🤲🏿"]},{"e":"🤝","opts":["🤝"]},{"e":"🙏","opts":["🙏","🙏🏻","🙏🏼","🙏🏽","🙏🏾","🙏🏿"]},{"e":"✍️","opts":["✍️","✍🏻","✍🏼","✍🏽","✍🏾","✍🏿"]},{"e":"💅","opts":["💅","💅🏻","💅🏼","💅🏽","💅🏾","💅🏿"]},{"e":"🤳","opts":["🤳","🤳🏻","🤳🏼","🤳🏽","🤳🏾","🤳🏿"]},{"e":"💪","opts":["💪","💪🏻","💪🏼","💪🏽","💪🏾","💪🏿"]},{"e":"🦾","opts":["🦾"]},{"e":"🦿","opts":["🦿"]},{"e":"🦵","opts":["🦵","🦵🏻","🦵🏼","🦵🏽","🦵🏾","🦵🏿"]},{"e":"🦶","opts":["🦶","🦶🏻","🦶🏼","🦶🏽","🦶🏾","🦶🏿"]},{"e":"👂️","opts":["👂️","👂🏻","👂🏼","👂🏽","👂🏾","👂🏿"]},{"e":"🦻","opts":["🦻","🦻🏻","🦻🏼","🦻🏽","🦻🏾","🦻🏿"]},{"e":"👃","opts":["👃","👃🏻","👃🏼","👃🏽","👃🏾","👃🏿"]},{"e":"🧠","opts":["🧠"]},{"e":"🫀","opts":["🫀"]},{"e":"🫁","opts":["🫁"]},{"e":"🦷","opts":["🦷"]},{"e":"🦴","opts":["🦴"]},{"e":"👀","opts":["👀"]},{"e":"👁️","opts":["👁️"]},{"e":"👅","opts":["👅"]},{"e":"👄","opts":["👄"]},{"e":"👶","opts":["👶","👶🏻","👶🏼","👶🏽","👶🏾","👶🏿"]},{"e":"🧒","opts":["🧒","🧒🏻","🧒🏼","🧒🏽","🧒🏾","🧒🏿"]},{"e":"👦","opts":["👦","👦🏻","👦🏼","👦🏽","👦🏾","👦🏿"]},{"e":"👧","opts":["👧","👧🏻","👧🏼","👧🏽","👧🏾","👧🏿"]},{"e":"🧑","opts":["🧑","🧑🏻","🧑🏼","🧑🏽","🧑🏾","🧑🏿"]},{"e":"👱","opts":["👱","👱🏻","👱🏼","👱🏽","👱🏾","👱🏿"]},{"e":"👨","opts":["👨","👨🏻","👨🏼","👨🏽","👨🏾","👨🏿"]},{"e":"🧔","opts":["🧔","🧔🏻","🧔🏼","🧔🏽","🧔🏾","🧔🏿"]},{"e":"👨‍🦰","opts":["👨‍🦰","👨🏻‍🦰","👨🏼‍🦰","👨🏽‍🦰","👨🏾‍🦰","👨🏿‍🦰"]},{"e":"👨‍🦱","opts":["👨‍🦱","👨🏻‍🦱","👨🏼‍🦱","👨🏽‍🦱","👨🏾‍🦱","👨🏿‍🦱"]},{"e":"👨‍🦳","opts":["👨‍🦳","👨🏻‍🦳","👨🏼‍🦳","👨🏽‍🦳","👨🏾‍🦳","👨🏿‍🦳"]},{"e":"👨‍🦲","opts":["👨‍🦲","👨🏻‍🦲","👨🏼‍🦲","👨🏽‍🦲","👨🏾‍🦲","👨🏿‍🦲"]},{"e":"👩","opts":["👩","👩🏻","👩🏼","👩🏽","👩🏾","👩🏿"]},{"e":"👩‍🦰","opts":["👩‍🦰","👩🏻‍🦰","👩🏼‍🦰","👩🏽‍🦰","👩🏾‍🦰","👩🏿‍🦰"]},{"e":"🧑‍🦰","opts":["🧑‍🦰","🧑🏻‍🦰","🧑🏼‍🦰","🧑🏽‍🦰","🧑🏾‍🦰","🧑🏿‍🦰"]},{"e":"👩‍🦱","opts":["👩‍🦱","👩🏻‍🦱","👩🏼‍🦱","👩🏽‍🦱","👩🏾‍🦱","👩🏿‍🦱"]},{"e":"🧑‍🦱","opts":["🧑‍🦱","🧑🏻‍🦱","🧑🏼‍🦱","🧑🏽‍🦱","🧑🏾‍🦱","🧑🏿‍🦱"]},{"e":"👩‍🦳","opts":["👩‍🦳","👩🏻‍🦳","👩🏼‍🦳","👩🏽‍🦳","👩🏾‍🦳","👩🏿‍🦳"]},{"e":"🧑‍🦳","opts":["🧑‍🦳","🧑🏻‍🦳","🧑🏼‍🦳","🧑🏽‍🦳","🧑🏾‍🦳","🧑🏿‍🦳"]},{"e":"👩‍🦲","opts":["👩‍🦲","👩🏻‍🦲","👩🏼‍🦲","👩🏽‍🦲","👩🏾‍🦲","👩🏿‍🦲"]},{"e":"🧑‍🦲","opts":["🧑‍🦲","🧑🏻‍🦲","🧑🏼‍🦲","🧑🏽‍🦲","🧑🏾‍🦲","🧑🏿‍🦲"]},{"e":"👱‍♀️","opts":["👱‍♀️","👱🏻‍♀️","👱🏼‍♀️","👱🏽‍♀️","👱🏾‍♀️","👱🏿‍♀️"]},{"e":"👱‍♂️","opts":["👱‍♂️","👱🏻‍♂️","👱🏼‍♂️","👱🏽‍♂️","👱🏾‍♂️","👱🏿‍♂️"]},{"e":"🧓","opts":["🧓","🧓🏻","🧓🏼","🧓🏽","🧓🏾","🧓🏿"]},{"e":"👴","opts":["👴","👴🏻","👴🏼","👴🏽","👴🏾","👴🏿"]},{"e":"👵","opts":["👵","👵🏻","👵🏼","👵🏽","👵🏾","👵🏿"]},{"e":"🙍","opts":["🙍","🙍🏻","🙍🏼","🙍🏽","🙍🏾","🙍🏿"]},{"e":"🙍‍♂️","opts":["🙍‍♂️","🙍🏻‍♂️","🙍🏼‍♂️","🙍🏽‍♂️","🙍🏾‍♂️","🙍🏿‍♂️"]},{"e":"🙍‍♀️","opts":["🙍‍♀️","🙍🏻‍♀️","🙍🏼‍♀️","🙍🏽‍♀️","🙍🏾‍♀️","🙍🏿‍♀️"]},{"e":"🙎","opts":["🙎","🙎🏻","🙎🏼","🙎🏽","🙎🏾","🙎🏿"]},{"e":"🙎‍♂️","opts":["🙎‍♂️","🙎🏻‍♂️","🙎🏼‍♂️","🙎🏽‍♂️","🙎🏾‍♂️","🙎🏿‍♂️"]},{"e":"🙎‍♀️","opts":["🙎‍♀️","🙎🏻‍♀️","🙎🏼‍♀️","🙎🏽‍♀️","🙎🏾‍♀️","🙎🏿‍♀️"]},{"e":"🙅","opts":["🙅","🙅🏻","🙅🏼","🙅🏽","🙅🏾","🙅🏿"]},{"e":"🙅‍♂️","opts":["🙅‍♂️","🙅🏻‍♂️","🙅🏼‍♂️","🙅🏽‍♂️","🙅🏾‍♂️","🙅🏿‍♂️"]},{"e":"🙅‍♀️","opts":["🙅‍♀️","🙅🏻‍♀️","🙅🏼‍♀️","🙅🏽‍♀️","🙅🏾‍♀️","🙅🏿‍♀️"]},{"e":"🙆","opts":["🙆","🙆🏻","🙆🏼","🙆🏽","🙆🏾","🙆🏿"]},{"e":"🙆‍♂️","opts":["🙆‍♂️","🙆🏻‍♂️","🙆🏼‍♂️","🙆🏽‍♂️","🙆🏾‍♂️","🙆🏿‍♂️"]},{"e":"🙆‍♀️","opts":["🙆‍♀️","🙆🏻‍♀️","🙆🏼‍♀️","🙆🏽‍♀️","🙆🏾‍♀️","🙆🏿‍♀️"]},{"e":"💁","opts":["💁","💁🏻","💁🏼","💁🏽","💁🏾","💁🏿"]},{"e":"💁‍♂️","opts":["💁‍♂️","💁🏻‍♂️","💁🏼‍♂️","💁🏽‍♂️","💁🏾‍♂️","💁🏿‍♂️"]},{"e":"💁‍♀️","opts":["💁‍♀️","💁🏻‍♀️","💁🏼‍♀️","💁🏽‍♀️","💁🏾‍♀️","💁🏿‍♀️"]},{"e":"🙋","opts":["🙋","🙋🏻","🙋🏼","🙋🏽","🙋🏾","🙋🏿"]},{"e":"🙋‍♂️","opts":["🙋‍♂️","🙋🏻‍♂️","🙋🏼‍♂️","🙋🏽‍♂️","🙋🏾‍♂️","🙋🏿‍♂️"]},{"e":"🙋‍♀️","opts":["🙋‍♀️","🙋🏻‍♀️","🙋🏼‍♀️","🙋🏽‍♀️","🙋🏾‍♀️","🙋🏿‍♀️"]},{"e":"🧏","opts":["🧏","🧏🏻","🧏🏼","🧏🏽","🧏🏾","🧏🏿"]},{"e":"🧏‍♂️","opts":["🧏‍♂️","🧏🏻‍♂️","🧏🏼‍♂️","🧏🏽‍♂️","🧏🏾‍♂️","🧏🏿‍♂️"]},{"e":"🧏‍♀️","opts":["🧏‍♀️","🧏🏻‍♀️","🧏🏼‍♀️","🧏🏽‍♀️","🧏🏾‍♀️","🧏🏿‍♀️"]},{"e":"🙇","opts":["🙇","🙇🏻","🙇🏼","🙇🏽","🙇🏾","🙇🏿"]},{"e":"🙇‍♂️","opts":["🙇‍♂️","🙇🏻‍♂️","🙇🏼‍♂️","🙇🏽‍♂️","🙇🏾‍♂️","🙇🏿‍♂️"]},{"e":"🙇‍♀️","opts":["🙇‍♀️","🙇🏻‍♀️","🙇🏼‍♀️","🙇🏽‍♀️","🙇🏾‍♀️","🙇🏿‍♀️"]},{"e":"🤦","opts":["🤦","🤦🏻","🤦🏼","🤦🏽","🤦🏾","🤦🏿"]},{"e":"🤦‍♂️","opts":["🤦‍♂️","🤦🏻‍♂️","🤦🏼‍♂️","🤦🏽‍♂️","🤦🏾‍♂️","🤦🏿‍♂️"]},{"e":"🤦‍♀️","opts":["🤦‍♀️","🤦🏻‍♀️","🤦🏼‍♀️","🤦🏽‍♀️","🤦🏾‍♀️","🤦🏿‍♀️"]},{"e":"🤷","opts":["🤷","🤷🏻","🤷🏼","🤷🏽","🤷🏾","🤷🏿"]},{"e":"🤷‍♂️","opts":["🤷‍♂️","🤷🏻‍♂️","🤷🏼‍♂️","🤷🏽‍♂️","🤷🏾‍♂️","🤷🏿‍♂️"]},{"e":"🤷‍♀️","opts":["🤷‍♀️","🤷🏻‍♀️","🤷🏼‍♀️","🤷🏽‍♀️","🤷🏾‍♀️","🤷🏿‍♀️"]},{"e":"🧑‍⚕️","opts":["🧑‍⚕️","🧑🏻‍⚕️","🧑🏼‍⚕️","🧑🏽‍⚕️","🧑🏾‍⚕️","🧑🏿‍⚕️"]},{"e":"👨‍⚕️","opts":["👨‍⚕️","👨🏻‍⚕️","👨🏼‍⚕️","👨🏽‍⚕️","👨🏾‍⚕️","👨🏿‍⚕️"]},{"e":"👩‍⚕️","opts":["👩‍⚕️","👩🏻‍⚕️","👩🏼‍⚕️","👩🏽‍⚕️","👩🏾‍⚕️","👩🏿‍⚕️"]},{"e":"🧑‍🎓","opts":["🧑‍🎓","🧑🏻‍🎓","🧑🏼‍🎓","🧑🏽‍🎓","🧑🏾‍🎓","🧑🏿‍🎓"]},{"e":"👨‍🎓","opts":["👨‍🎓","👨🏻‍🎓","👨🏼‍🎓","👨🏽‍🎓","👨🏾‍🎓","👨🏿‍🎓"]},{"e":"👩‍🎓","opts":["👩‍🎓","👩🏻‍🎓","👩🏼‍🎓","👩🏽‍🎓","👩🏾‍🎓","👩🏿‍🎓"]},{"e":"🧑‍🏫","opts":["🧑‍🏫","🧑🏻‍🏫","🧑🏼‍🏫","🧑🏽‍🏫","🧑🏾‍🏫","🧑🏿‍🏫"]},{"e":"👨‍🏫","opts":["👨‍🏫","👨🏻‍🏫","👨🏼‍🏫","👨🏽‍🏫","👨🏾‍🏫","👨🏿‍🏫"]},{"e":"👩‍🏫","opts":["👩‍🏫","👩🏻‍🏫","👩🏼‍🏫","👩🏽‍🏫","👩🏾‍🏫","👩🏿‍🏫"]},{"e":"🧑‍⚖️","opts":["🧑‍⚖️","🧑🏻‍⚖️","🧑🏼‍⚖️","🧑🏽‍⚖️","🧑🏾‍⚖️","🧑🏿‍⚖️"]},{"e":"👨‍⚖️","opts":["👨‍⚖️","👨🏻‍⚖️","👨🏼‍⚖️","👨🏽‍⚖️","👨🏾‍⚖️","👨🏿‍⚖️"]},{"e":"👩‍⚖️","opts":["👩‍⚖️","👩🏻‍⚖️","👩🏼‍⚖️","👩🏽‍⚖️","👩🏾‍⚖️","👩🏿‍⚖️"]},{"e":"🧑‍🌾","opts":["🧑‍🌾","🧑🏻‍🌾","🧑🏼‍🌾","🧑🏽‍🌾","🧑🏾‍🌾","🧑🏿‍🌾"]},{"e":"👨‍🌾","opts":["👨‍🌾","👨🏻‍🌾","👨🏼‍🌾","👨🏽‍🌾","👨🏾‍🌾","👨🏿‍🌾"]},{"e":"👩‍🌾","opts":["👩‍🌾","👩🏻‍🌾","👩🏼‍🌾","👩🏽‍🌾","👩🏾‍🌾","👩🏿‍🌾"]},{"e":"🧑‍🍳","opts":["🧑‍🍳","🧑🏻‍🍳","🧑🏼‍🍳","🧑🏽‍🍳","🧑🏾‍🍳","🧑🏿‍🍳"]},{"e":"👨‍🍳","opts":["👨‍🍳","👨🏻‍🍳","👨🏼‍🍳","👨🏽‍🍳","👨🏾‍🍳","👨🏿‍🍳"]},{"e":"👩‍🍳","opts":["👩‍🍳","👩🏻‍🍳","👩🏼‍🍳","👩🏽‍🍳","👩🏾‍🍳","👩🏿‍🍳"]},{"e":"🧑‍🔧","opts":["🧑‍🔧","🧑🏻‍🔧","🧑🏼‍🔧","🧑🏽‍🔧","🧑🏾‍🔧","🧑🏿‍🔧"]},{"e":"👨‍🔧","opts":["👨‍🔧","👨🏻‍🔧","👨🏼‍🔧","👨🏽‍🔧","👨🏾‍🔧","👨🏿‍🔧"]},{"e":"👩‍🔧","opts":["👩‍🔧","👩🏻‍🔧","👩🏼‍🔧","👩🏽‍🔧","👩🏾‍🔧","👩🏿‍🔧"]},{"e":"🧑‍🏭","opts":["🧑‍🏭","🧑🏻‍🏭","🧑🏼‍🏭","🧑🏽‍🏭","🧑🏾‍🏭","🧑🏿‍🏭"]},{"e":"👨‍🏭","opts":["👨‍🏭","👨🏻‍🏭","👨🏼‍🏭","👨🏽‍🏭","👨🏾‍🏭","👨🏿‍🏭"]},{"e":"👩‍🏭","opts":["👩‍🏭","👩🏻‍🏭","👩🏼‍🏭","👩🏽‍🏭","👩🏾‍🏭","👩🏿‍🏭"]},{"e":"🧑‍💼","opts":["🧑‍💼","🧑🏻‍💼","🧑🏼‍💼","🧑🏽‍💼","🧑🏾‍💼","🧑🏿‍💼"]},{"e":"👨‍💼","opts":["👨‍💼","👨🏻‍💼","👨🏼‍💼","👨🏽‍💼","👨🏾‍💼","👨🏿‍💼"]},{"e":"👩‍💼","opts":["👩‍💼","👩🏻‍💼","👩🏼‍💼","👩🏽‍💼","👩🏾‍💼","👩🏿‍💼"]},{"e":"🧑‍🔬","opts":["🧑‍🔬","🧑🏻‍🔬","🧑🏼‍🔬","🧑🏽‍🔬","🧑🏾‍🔬","🧑🏿‍🔬"]},{"e":"👨‍🔬","opts":["👨‍🔬","👨🏻‍🔬","👨🏼‍🔬","👨🏽‍🔬","👨🏾‍🔬","👨🏿‍🔬"]},{"e":"👩‍🔬","opts":["👩‍🔬","👩🏻‍🔬","👩🏼‍🔬","👩🏽‍🔬","👩🏾‍🔬","👩🏿‍🔬"]},{"e":"🧑‍💻","opts":["🧑‍💻","🧑🏻‍💻","🧑🏼‍💻","🧑🏽‍💻","🧑🏾‍💻","🧑🏿‍💻"]},{"e":"👨‍💻","opts":["👨‍💻","👨🏻‍💻","👨🏼‍💻","👨🏽‍💻","👨🏾‍💻","👨🏿‍💻"]},{"e":"👩‍💻","opts":["👩‍💻","👩🏻‍💻","👩🏼‍💻","👩🏽‍💻","👩🏾‍💻","👩🏿‍💻"]},{"e":"🧑‍🎤","opts":["🧑‍🎤","🧑🏻‍🎤","🧑🏼‍🎤","🧑🏽‍🎤","🧑🏾‍🎤","🧑🏿‍🎤"]},{"e":"👨‍🎤","opts":["👨‍🎤","👨🏻‍🎤","👨🏼‍🎤","👨🏽‍🎤","👨🏾‍🎤","👨🏿‍🎤"]},{"e":"👩‍🎤","opts":["👩‍🎤","👩🏻‍🎤","👩🏼‍🎤","👩🏽‍🎤","👩🏾‍🎤","👩🏿‍🎤"]},{"e":"🧑‍🎨","opts":["🧑‍🎨","🧑🏻‍🎨","🧑🏼‍🎨","🧑🏽‍🎨","🧑🏾‍🎨","🧑🏿‍🎨"]},{"e":"👨‍🎨","opts":["👨‍🎨","👨🏻‍🎨","👨🏼‍🎨","👨🏽‍🎨","👨🏾‍🎨","👨🏿‍🎨"]},{"e":"👩‍🎨","opts":["👩‍🎨","👩🏻‍🎨","👩🏼‍🎨","👩🏽‍🎨","👩🏾‍🎨","👩🏿‍🎨"]},{"e":"🧑‍✈️","opts":["🧑‍✈️","🧑🏻‍✈️","🧑🏼‍✈️","🧑🏽‍✈️","🧑🏾‍✈️","🧑🏿‍✈️"]},{"e":"👨‍✈️","opts":["👨‍✈️","👨🏻‍✈️","👨🏼‍✈️","👨🏽‍✈️","👨🏾‍✈️","👨🏿‍✈️"]},{"e":"👩‍✈️","opts":["👩‍✈️","👩🏻‍✈️","👩🏼‍✈️","👩🏽‍✈️","👩🏾‍✈️","👩🏿‍✈️"]},{"e":"🧑‍🚀","opts":["🧑‍🚀","🧑🏻‍🚀","🧑🏼‍🚀","🧑🏽‍🚀","🧑🏾‍🚀","🧑🏿‍🚀"]},{"e":"👨‍🚀","opts":["👨‍🚀","👨🏻‍🚀","👨🏼‍🚀","👨🏽‍🚀","👨🏾‍🚀","👨🏿‍🚀"]},{"e":"👩‍🚀","opts":["👩‍🚀","👩🏻‍🚀","👩🏼‍🚀","👩🏽‍🚀","👩🏾‍🚀","👩🏿‍🚀"]},{"e":"🧑‍🚒","opts":["🧑‍🚒","🧑🏻‍🚒","🧑🏼‍🚒","🧑🏽‍🚒","🧑🏾‍🚒","🧑🏿‍🚒"]},{"e":"👨‍🚒","opts":["👨‍🚒","👨🏻‍🚒","👨🏼‍🚒","👨🏽‍🚒","👨🏾‍🚒","👨🏿‍🚒"]},{"e":"👩‍🚒","opts":["👩‍🚒","👩🏻‍🚒","👩🏼‍🚒","👩🏽‍🚒","👩🏾‍🚒","👩🏿‍🚒"]},{"e":"👮","opts":["👮","👮🏻","👮🏼","👮🏽","👮🏾","👮🏿"]},{"e":"👮‍♂️","opts":["👮‍♂️","👮🏻‍♂️","👮🏼‍♂️","👮🏽‍♂️","👮🏾‍♂️","👮🏿‍♂️"]},{"e":"👮‍♀️","opts":["👮‍♀️","👮🏻‍♀️","👮🏼‍♀️","👮🏽‍♀️","👮🏾‍♀️","👮🏿‍♀️"]},{"e":"🕵️","opts":["🕵️","🕵🏻","🕵🏼","🕵🏽","🕵🏾","🕵🏿"]},{"e":"🕵️‍♂️","opts":["🕵️‍♂️","🕵🏻‍♂️","🕵🏼‍♂️","🕵🏽‍♂️","🕵🏾‍♂️","🕵🏿‍♂️"]},{"e":"🕵️‍♀️","opts":["🕵️‍♀️","🕵🏻‍♀️","🕵🏼‍♀️","🕵🏽‍♀️","🕵🏾‍♀️","🕵🏿‍♀️"]},{"e":"💂","opts":["💂","💂🏻","💂🏼","💂🏽","💂🏾","💂🏿"]},{"e":"💂‍♂️","opts":["💂‍♂️","💂🏻‍♂️","💂🏼‍♂️","💂🏽‍♂️","💂🏾‍♂️","💂🏿‍♂️"]},{"e":"💂‍♀️","opts":["💂‍♀️","💂🏻‍♀️","💂🏼‍♀️","💂🏽‍♀️","💂🏾‍♀️","💂🏿‍♀️"]},{"e":"🥷","opts":["🥷","🥷🏻","🥷🏼","🥷🏽","🥷🏾","🥷🏿"]},{"e":"👷","opts":["👷","👷🏻","👷🏼","👷🏽","👷🏾","👷🏿"]},{"e":"👷‍♂️","opts":["👷‍♂️","👷🏻‍♂️","👷🏼‍♂️","👷🏽‍♂️","👷🏾‍♂️","👷🏿‍♂️"]},{"e":"👷‍♀️","opts":["👷‍♀️","👷🏻‍♀️","👷🏼‍♀️","👷🏽‍♀️","👷🏾‍♀️","👷🏿‍♀️"]},{"e":"🤴","opts":["🤴","🤴🏻","🤴🏼","🤴🏽","🤴🏾","🤴🏿"]},{"e":"👸","opts":["👸","👸🏻","👸🏼","👸🏽","👸🏾","👸🏿"]},{"e":"👳","opts":["👳","👳🏻","👳🏼","👳🏽","👳🏾","👳🏿"]},{"e":"👳‍♂️","opts":["👳‍♂️","👳🏻‍♂️","👳🏼‍♂️","👳🏽‍♂️","👳🏾‍♂️","👳🏿‍♂️"]},{"e":"👳‍♀️","opts":["👳‍♀️","👳🏻‍♀️","👳🏼‍♀️","👳🏽‍♀️","👳🏾‍♀️","👳🏿‍♀️"]},{"e":"👲","opts":["👲","👲🏻","👲🏼","👲🏽","👲🏾","👲🏿"]},{"e":"🧕","opts":["🧕","🧕🏻","🧕🏼","🧕🏽","🧕🏾","🧕🏿"]},{"e":"🤵","opts":["🤵","🤵🏻","🤵🏼","🤵🏽","🤵🏾","🤵🏿"]},{"e":"🤵‍♂️","opts":["🤵‍♂️","🤵🏻‍♂️","🤵🏼‍♂️","🤵🏽‍♂️","🤵🏾‍♂️","🤵🏿‍♂️"]},{"e":"🤵‍♀️","opts":["🤵‍♀️","🤵🏻‍♀️","🤵🏼‍♀️","🤵🏽‍♀️","🤵🏾‍♀️","🤵🏿‍♀️"]},{"e":"👰","opts":["👰","👰🏻","👰🏼","👰🏽","👰🏾","👰🏿"]},{"e":"👰‍♂️","opts":["👰‍♂️","👰🏻‍♂️","👰🏼‍♂️","👰🏽‍♂️","👰🏾‍♂️","👰🏿‍♂️"]},{"e":"👰‍♀️","opts":["👰‍♀️","👰🏻‍♀️","👰🏼‍♀️","👰🏽‍♀️","👰🏾‍♀️","👰🏿‍♀️"]},{"e":"🤰","opts":["🤰","🤰🏻","🤰🏼","🤰🏽","🤰🏾","🤰🏿"]},{"e":"🤱","opts":["🤱","🤱🏻","🤱🏼","🤱🏽","🤱🏾","🤱🏿"]},{"e":"👩‍🍼","opts":["👩‍🍼","👩🏻‍🍼","👩🏼‍🍼","👩🏽‍🍼","👩🏾‍🍼","👩🏿‍🍼"]},{"e":"👨‍🍼","opts":["👨‍🍼","👨🏻‍🍼","👨🏼‍🍼","👨🏽‍🍼","👨🏾‍🍼","👨🏿‍🍼"]},{"e":"🧑‍🍼","opts":["🧑‍🍼","🧑🏻‍🍼","🧑🏼‍🍼","🧑🏽‍🍼","🧑🏾‍🍼","🧑🏿‍🍼"]},{"e":"👼","opts":["👼","👼🏻","👼🏼","👼🏽","👼🏾","👼🏿"]},{"e":"🎅","opts":["🎅","🎅🏻","🎅🏼","🎅🏽","🎅🏾","🎅🏿"]},{"e":"🤶","opts":["🤶","🤶🏻","🤶🏼","🤶🏽","🤶🏾","🤶🏿"]},{"e":"🧑‍🎄","opts":["🧑‍🎄","🧑🏻‍🎄","🧑🏼‍🎄","🧑🏽‍🎄","🧑🏾‍🎄","🧑🏿‍🎄"]},{"e":"🦸","opts":["🦸","🦸🏻","🦸🏼","🦸🏽","🦸🏾","🦸🏿"]},{"e":"🦸‍♂️","opts":["🦸‍♂️","🦸🏻‍♂️","🦸🏼‍♂️","🦸🏽‍♂️","🦸🏾‍♂️","🦸🏿‍♂️"]},{"e":"🦸‍♀️","opts":["🦸‍♀️","🦸🏻‍♀️","🦸🏼‍♀️","🦸🏽‍♀️","🦸🏾‍♀️","🦸🏿‍♀️"]},{"e":"🦹","opts":["🦹","🦹🏻","🦹🏼","🦹🏽","🦹🏾","🦹🏿"]},{"e":"🦹‍♂️","opts":["🦹‍♂️","🦹🏻‍♂️","🦹🏼‍♂️","🦹🏽‍♂️","🦹🏾‍♂️","🦹🏿‍♂️"]},{"e":"🦹‍♀️","opts":["🦹‍♀️","🦹🏻‍♀️","🦹🏼‍♀️","🦹🏽‍♀️","🦹🏾‍♀️","🦹🏿‍♀️"]},{"e":"🧙","opts":["🧙","🧙🏻","🧙🏼","🧙🏽","🧙🏾","🧙🏿"]},{"e":"🧙‍♂️","opts":["🧙‍♂️","🧙🏻‍♂️","🧙🏼‍♂️","🧙🏽‍♂️","🧙🏾‍♂️","🧙🏿‍♂️"]},{"e":"🧙‍♀️","opts":["🧙‍♀️","🧙🏻‍♀️","🧙🏼‍♀️","🧙🏽‍♀️","🧙🏾‍♀️","🧙🏿‍♀️"]},{"e":"🧚","opts":["🧚","🧚🏻","🧚🏼","🧚🏽","🧚🏾","🧚🏿"]},{"e":"🧚‍♂️","opts":["🧚‍♂️","🧚🏻‍♂️","🧚🏼‍♂️","🧚🏽‍♂️","🧚🏾‍♂️","🧚🏿‍♂️"]},{"e":"🧚‍♀️","opts":["🧚‍♀️","🧚🏻‍♀️","🧚🏼‍♀️","🧚🏽‍♀️","🧚🏾‍♀️","🧚🏿‍♀️"]},{"e":"🧛","opts":["🧛","🧛🏻","🧛🏼","🧛🏽","🧛🏾","🧛🏿"]},{"e":"🧛‍♂️","opts":["🧛‍♂️","🧛🏻‍♂️","🧛🏼‍♂️","🧛🏽‍♂️","🧛🏾‍♂️","🧛🏿‍♂️"]},{"e":"🧛‍♀️","opts":["🧛‍♀️","🧛🏻‍♀️","🧛🏼‍♀️","🧛🏽‍♀️","🧛🏾‍♀️","🧛🏿‍♀️"]},{"e":"🧜","opts":["🧜","🧜🏻","🧜🏼","🧜🏽","🧜🏾","🧜🏿"]},{"e":"🧜‍♂️","opts":["🧜‍♂️","🧜🏻‍♂️","🧜🏼‍♂️","🧜🏽‍♂️","🧜🏾‍♂️","🧜🏿‍♂️"]},{"e":"🧜‍♀️","opts":["🧜‍♀️","🧜🏻‍♀️","🧜🏼‍♀️","🧜🏽‍♀️","🧜🏾‍♀️","🧜🏿‍♀️"]},{"e":"🧝","opts":["🧝","🧝🏻","🧝🏼","🧝🏽","🧝🏾","🧝🏿"]},{"e":"🧝‍♂️","opts":["🧝‍♂️","🧝🏻‍♂️","🧝🏼‍♂️","🧝🏽‍♂️","🧝🏾‍♂️","🧝🏿‍♂️"]},{"e":"🧝‍♀️","opts":["🧝‍♀️","🧝🏻‍♀️","🧝🏼‍♀️","🧝🏽‍♀️","🧝🏾‍♀️","🧝🏿‍♀️"]},{"e":"🧞","opts":["🧞"]},{"e":"🧞‍♂️","opts":["🧞‍♂️"]},{"e":"🧞‍♀️","opts":["🧞‍♀️"]},{"e":"🧟","opts":["🧟"]},{"e":"🧟‍♂️","opts":["🧟‍♂️"]},{"e":"🧟‍♀️","opts":["🧟‍♀️"]},{"e":"💆","opts":["💆","💆🏻","💆🏼","💆🏽","💆🏾","💆🏿"]},{"e":"💆‍♂️","opts":["💆‍♂️","💆🏻‍♂️","💆🏼‍♂️","💆🏽‍♂️","💆🏾‍♂️","💆🏿‍♂️"]},{"e":"💆‍♀️","opts":["💆‍♀️","💆🏻‍♀️","💆🏼‍♀️","💆🏽‍♀️","💆🏾‍♀️","💆🏿‍♀️"]},{"e":"💇","opts":["💇","💇🏻","💇🏼","💇🏽","💇🏾","💇🏿"]},{"e":"💇‍♂️","opts":["💇‍♂️","💇🏻‍♂️","💇🏼‍♂️","💇🏽‍♂️","💇🏾‍♂️","💇🏿‍♂️"]},{"e":"💇‍♀️","opts":["💇‍♀️","💇🏻‍♀️","💇🏼‍♀️","💇🏽‍♀️","💇🏾‍♀️","💇🏿‍♀️"]},{"e":"🚶","opts":["🚶","🚶🏻","🚶🏼","🚶🏽","🚶🏾","🚶🏿"]},{"e":"🚶‍♂️","opts":["🚶‍♂️","🚶🏻‍♂️","🚶🏼‍♂️","🚶🏽‍♂️","🚶🏾‍♂️","🚶🏿‍♂️"]},{"e":"🚶‍♀️","opts":["🚶‍♀️","🚶🏻‍♀️","🚶🏼‍♀️","🚶🏽‍♀️","🚶🏾‍♀️","🚶🏿‍♀️"]},{"e":"🧍","opts":["🧍","🧍🏻","🧍🏼","🧍🏽","🧍🏾","🧍🏿"]},{"e":"🧍‍♂️","opts":["🧍‍♂️","🧍🏻‍♂️","🧍🏼‍♂️","🧍🏽‍♂️","🧍🏾‍♂️","🧍🏿‍♂️"]},{"e":"🧍‍♀️","opts":["🧍‍♀️","🧍🏻‍♀️","🧍🏼‍♀️","🧍🏽‍♀️","🧍🏾‍♀️","🧍🏿‍♀️"]},{"e":"🧎","opts":["🧎","🧎🏻","🧎🏼","🧎🏽","🧎🏾","🧎🏿"]},{"e":"🧎‍♂️","opts":["🧎‍♂️","🧎🏻‍♂️","🧎🏼‍♂️","🧎🏽‍♂️","🧎🏾‍♂️","🧎🏿‍♂️"]},{"e":"🧎‍♀️","opts":["🧎‍♀️","🧎🏻‍♀️","🧎🏼‍♀️","🧎🏽‍♀️","🧎🏾‍♀️","🧎🏿‍♀️"]},{"e":"🧑‍🦯","opts":["🧑‍🦯","🧑🏻‍🦯","🧑🏼‍🦯","🧑🏽‍🦯","🧑🏾‍🦯","🧑🏿‍🦯"]},{"e":"👨‍🦯","opts":["👨‍🦯","👨🏻‍🦯","👨🏼‍🦯","👨🏽‍🦯","👨🏾‍🦯","👨🏿‍🦯"]},{"e":"👩‍🦯","opts":["👩‍🦯","👩🏻‍🦯","👩🏼‍🦯","👩🏽‍🦯","👩🏾‍🦯","👩🏿‍🦯"]},{"e":"🧑‍🦼","opts":["🧑‍🦼","🧑🏻‍🦼","🧑🏼‍🦼","🧑🏽‍🦼","🧑🏾‍🦼","🧑🏿‍🦼"]},{"e":"👨‍🦼","opts":["👨‍🦼","👨🏻‍🦼","👨🏼‍🦼","👨🏽‍🦼","👨🏾‍🦼","👨🏿‍🦼"]},{"e":"👩‍🦼","opts":["👩‍🦼","👩🏻‍🦼","👩🏼‍🦼","👩🏽‍🦼","👩🏾‍🦼","👩🏿‍🦼"]},{"e":"🧑‍🦽","opts":["🧑‍🦽","🧑🏻‍🦽","🧑🏼‍🦽","🧑🏽‍🦽","🧑🏾‍🦽","🧑🏿‍🦽"]},{"e":"👨‍🦽","opts":["👨‍🦽","👨🏻‍🦽","👨🏼‍🦽","👨🏽‍🦽","👨🏾‍🦽","👨🏿‍🦽"]},{"e":"👩‍🦽","opts":["👩‍🦽","👩🏻‍🦽","👩🏼‍🦽","👩🏽‍🦽","👩🏾‍🦽","👩🏿‍🦽"]},{"e":"🏃","opts":["🏃","🏃🏻","🏃🏼","🏃🏽","🏃🏾","🏃🏿"]},{"e":"🏃‍♂️","opts":["🏃‍♂️","🏃🏻‍♂️","🏃🏼‍♂️","🏃🏽‍♂️","🏃🏾‍♂️","🏃🏿‍♂️"]},{"e":"🏃‍♀️","opts":["🏃‍♀️","🏃🏻‍♀️","🏃🏼‍♀️","🏃🏽‍♀️","🏃🏾‍♀️","🏃🏿‍♀️"]},{"e":"💃","opts":["💃","💃🏻","💃🏼","💃🏽","💃🏾","💃🏿"]},{"e":"🕺","opts":["🕺","🕺🏻","🕺🏼","🕺🏽","🕺🏾","🕺🏿"]},{"e":"🕴️","opts":["🕴️","🕴🏻","🕴🏼","🕴🏽","🕴🏾","🕴🏿"]},{"e":"👯","opts":["👯"]},{"e":"👯‍♂️","opts":["👯‍♂️"]},{"e":"👯‍♀️","opts":["👯‍♀️"]},{"e":"🧖","opts":["🧖","🧖🏻","🧖🏼","🧖🏽","🧖🏾","🧖🏿"]},{"e":"🧖‍♂️","opts":["🧖‍♂️","🧖🏻‍♂️","🧖🏼‍♂️","🧖🏽‍♂️","🧖🏾‍♂️","🧖🏿‍♂️"]},{"e":"🧖‍♀️","opts":["🧖‍♀️","🧖🏻‍♀️","🧖🏼‍♀️","🧖🏽‍♀️","🧖🏾‍♀️","🧖🏿‍♀️"]},{"e":"🧗","opts":["🧗","🧗🏻","🧗🏼","🧗🏽","🧗🏾","🧗🏿"]},{"e":"🧗‍♂️","opts":["🧗‍♂️","🧗🏻‍♂️","🧗🏼‍♂️","🧗🏽‍♂️","🧗🏾‍♂️","🧗🏿‍♂️"]},{"e":"🧗‍♀️","opts":["🧗‍♀️","🧗🏻‍♀️","🧗🏼‍♀️","🧗🏽‍♀️","🧗🏾‍♀️","🧗🏿‍♀️"]},{"e":"🤺","opts":["🤺"]},{"e":"🏇","opts":["🏇","🏇🏻","🏇🏼","🏇🏽","🏇🏾","🏇🏿"]},{"e":"⛷️","opts":["⛷️"]},{"e":"🏂️","opts":["🏂️","🏂🏻","🏂🏼","🏂🏽","🏂🏾","🏂🏿"]},{"e":"🏌️","opts":["🏌️","🏌🏻","🏌🏼","🏌🏽","🏌🏾","🏌🏿"]},{"e":"🏌️‍♂️","opts":["🏌️‍♂️","🏌🏻‍♂️","🏌🏼‍♂️","🏌🏽‍♂️","🏌🏾‍♂️","🏌🏿‍♂️"]},{"e":"🏌️‍♀️","opts":["🏌️‍♀️","🏌🏻‍♀️","🏌🏼‍♀️","🏌🏽‍♀️","🏌🏾‍♀️","🏌🏿‍♀️"]},{"e":"🏄️","opts":["🏄️","🏄🏻","🏄🏼","🏄🏽","🏄🏾","🏄🏿"]},{"e":"🏄‍♂️","opts":["🏄‍♂️","🏄🏻‍♂️","🏄🏼‍♂️","🏄🏽‍♂️","🏄🏾‍♂️","🏄🏿‍♂️"]},{"e":"🏄‍♀️","opts":["🏄‍♀️","🏄🏻‍♀️","🏄🏼‍♀️","🏄🏽‍♀️","🏄🏾‍♀️","🏄🏿‍♀️"]},{"e":"🚣","opts":["🚣","🚣🏻","🚣🏼","🚣🏽","🚣🏾","🚣🏿"]},{"e":"🚣‍♂️","opts":["🚣‍♂️","🚣🏻‍♂️","🚣🏼‍♂️","🚣🏽‍♂️","🚣🏾‍♂️","🚣🏿‍♂️"]},{"e":"🚣‍♀️","opts":["🚣‍♀️","🚣🏻‍♀️","🚣🏼‍♀️","🚣🏽‍♀️","🚣🏾‍♀️","🚣🏿‍♀️"]},{"e":"🏊️","opts":["🏊️","🏊🏻","🏊🏼","🏊🏽","🏊🏾","🏊🏿"]},{"e":"🏊‍♂️","opts":["🏊‍♂️","🏊🏻‍♂️","🏊🏼‍♂️","🏊🏽‍♂️","🏊🏾‍♂️","🏊🏿‍♂️"]},{"e":"🏊‍♀️","opts":["🏊‍♀️","🏊🏻‍♀️","🏊🏼‍♀️","🏊🏽‍♀️","🏊🏾‍♀️","🏊🏿‍♀️"]},{"e":"⛹️","opts":["⛹️","⛹🏻","⛹🏼","⛹🏽","⛹🏾","⛹🏿"]},{"e":"⛹️‍♂️","opts":["⛹️‍♂️","⛹🏻‍♂️","⛹🏼‍♂️","⛹🏽‍♂️","⛹🏾‍♂️","⛹🏿‍♂️"]},{"e":"⛹️‍♀️","opts":["⛹️‍♀️","⛹🏻‍♀️","⛹🏼‍♀️","⛹🏽‍♀️","⛹🏾‍♀️","⛹🏿‍♀️"]},{"e":"🏋️","opts":["🏋️","🏋🏻","🏋🏼","🏋🏽","🏋🏾","🏋🏿"]},{"e":"🏋️‍♂️","opts":["🏋️‍♂️","🏋🏻‍♂️","🏋🏼‍♂️","🏋🏽‍♂️","🏋🏾‍♂️","🏋🏿‍♂️"]},{"e":"🏋️‍♀️","opts":["🏋️‍♀️","🏋🏻‍♀️","🏋🏼‍♀️","🏋🏽‍♀️","🏋🏾‍♀️","🏋🏿‍♀️"]},{"e":"🚴","opts":["🚴","🚴🏻","🚴🏼","🚴🏽","🚴🏾","🚴🏿"]},{"e":"🚴‍♂️","opts":["🚴‍♂️","🚴🏻‍♂️","🚴🏼‍♂️","🚴🏽‍♂️","🚴🏾‍♂️","🚴🏿‍♂️"]},{"e":"🚴‍♀️","opts":["🚴‍♀️","🚴🏻‍♀️","🚴🏼‍♀️","🚴🏽‍♀️","🚴🏾‍♀️","🚴🏿‍♀️"]},{"e":"🚵","opts":["🚵","🚵🏻","🚵🏼","🚵🏽","🚵🏾","🚵🏿"]},{"e":"🚵‍♂️","opts":["🚵‍♂️","🚵🏻‍♂️","🚵🏼‍♂️","🚵🏽‍♂️","🚵🏾‍♂️","🚵🏿‍♂️"]},{"e":"🚵‍♀️","opts":["🚵‍♀️","🚵🏻‍♀️","🚵🏼‍♀️","🚵🏽‍♀️","🚵🏾‍♀️","🚵🏿‍♀️"]},{"e":"🤸","opts":["🤸","🤸🏻","🤸🏼","🤸🏽","🤸🏾","🤸🏿"]},{"e":"🤸‍♂️","opts":["🤸‍♂️","🤸🏻‍♂️","🤸🏼‍♂️","🤸🏽‍♂️","🤸🏾‍♂️","🤸🏿‍♂️"]},{"e":"🤸‍♀️","opts":["🤸‍♀️","🤸🏻‍♀️","🤸🏼‍♀️","🤸🏽‍♀️","🤸🏾‍♀️","🤸🏿‍♀️"]},{"e":"🤼","opts":["🤼"]},{"e":"🤼‍♂️","opts":["🤼‍♂️"]},{"e":"🤼‍♀️","opts":["🤼‍♀️"]},{"e":"🤽","opts":["🤽","🤽🏻","🤽🏼","🤽🏽","🤽🏾","🤽🏿"]},{"e":"🤽‍♂️","opts":["🤽‍♂️","🤽🏻‍♂️","🤽🏼‍♂️","🤽🏽‍♂️","🤽🏾‍♂️","🤽🏿‍♂️"]},{"e":"🤽‍♀️","opts":["🤽‍♀️","🤽🏻‍♀️","🤽🏼‍♀️","🤽🏽‍♀️","🤽🏾‍♀️","🤽🏿‍♀️"]},{"e":"🤾","opts":["🤾","🤾🏻","🤾🏼","🤾🏽","🤾🏾","🤾🏿"]},{"e":"🤾‍♂️","opts":["🤾‍♂️","🤾🏻‍♂️","🤾🏼‍♂️","🤾🏽‍♂️","🤾🏾‍♂️","🤾🏿‍♂️"]},{"e":"🤾‍♀️","opts":["🤾‍♀️","🤾🏻‍♀️","🤾🏼‍♀️","🤾🏽‍♀️","🤾🏾‍♀️","🤾🏿‍♀️"]},{"e":"🤹","opts":["🤹","🤹🏻","🤹🏼","🤹🏽","🤹🏾","🤹🏿"]},{"e":"🤹‍♂️","opts":["🤹‍♂️","🤹🏻‍♂️","🤹🏼‍♂️","🤹🏽‍♂️","🤹🏾‍♂️","🤹🏿‍♂️"]},{"e":"🤹‍♀️","opts":["🤹‍♀️","🤹🏻‍♀️","🤹🏼‍♀️","🤹🏽‍♀️","🤹🏾‍♀️","🤹🏿‍♀️"]},{"e":"🧘","opts":["🧘","🧘🏻","🧘🏼","🧘🏽","🧘🏾","🧘🏿"]},{"e":"🧘‍♂️","opts":["🧘‍♂️","🧘🏻‍♂️","🧘🏼‍♂️","🧘🏽‍♂️","🧘🏾‍♂️","🧘🏿‍♂️"]},{"e":"🧘‍♀️","opts":["🧘‍♀️","🧘🏻‍♀️","🧘🏼‍♀️","🧘🏽‍♀️","🧘🏾‍♀️","🧘🏿‍♀️"]},{"e":"🛀","opts":["🛀","🛀🏻","🛀🏼","🛀🏽","🛀🏾","🛀🏿"]},{"e":"🛌","opts":["🛌","🛌🏻","🛌🏼","🛌🏽","🛌🏾","🛌🏿"]},{"e":"🧑‍🤝‍🧑","opts":["🧑‍🤝‍🧑","🧑🏻‍🤝‍🧑🏻","🧑🏻‍🤝‍🧑🏼","🧑🏻‍🤝‍🧑🏽","🧑🏻‍🤝‍🧑🏾","🧑🏻‍🤝‍🧑🏿","🧑🏼‍🤝‍🧑🏻","🧑🏼‍🤝‍🧑🏼","🧑🏼‍🤝‍🧑🏽","🧑🏼‍🤝‍🧑🏾","🧑🏼‍🤝‍🧑🏿","🧑🏽‍🤝‍🧑🏻","🧑🏽‍🤝‍🧑🏼","🧑🏽‍🤝‍🧑🏽","🧑🏽‍🤝‍🧑🏾","🧑🏽‍🤝‍🧑🏿","🧑🏾‍🤝‍🧑🏻","🧑🏾‍🤝‍🧑🏼","🧑🏾‍🤝‍🧑🏽","🧑🏾‍🤝‍🧑🏾","🧑🏾‍🤝‍🧑🏿","🧑🏿‍🤝‍🧑🏻","🧑🏿‍🤝‍🧑🏼","🧑🏿‍🤝‍🧑🏽","🧑🏿‍🤝‍🧑🏾","🧑🏿‍🤝‍🧑🏿"]},{"e":"👭","opts":["👭","👭🏻","👩🏻‍🤝‍👩🏼","👩🏻‍🤝‍👩🏽","👩🏻‍🤝‍👩🏾","👩🏻‍🤝‍👩🏿","👩🏼‍🤝‍👩🏻","👭🏼","👩🏼‍🤝‍👩🏽","👩🏼‍🤝‍👩🏾","👩🏼‍🤝‍👩🏿","👩🏽‍🤝‍👩🏻","👩🏽‍🤝‍👩🏼","👭🏽","👩🏽‍🤝‍👩🏾","👩🏽‍🤝‍👩🏿","👩🏾‍🤝‍👩🏻","👩🏾‍🤝‍👩🏼","👩🏾‍🤝‍👩🏽","👭🏾","👩🏾‍🤝‍👩🏿","👩🏿‍🤝‍👩🏻","👩🏿‍🤝‍👩🏼","👩🏿‍🤝‍👩🏽","👩🏿‍🤝‍👩🏾","👭🏿"]},{"e":"👫","opts":["👫","👫🏻","👩🏻‍🤝‍👨🏼","👩🏻‍🤝‍👨🏽","👩🏻‍🤝‍👨🏾","👩🏻‍🤝‍👨🏿","👩🏼‍🤝‍👨🏻","👫🏼","👩🏼‍🤝‍👨🏽","👩🏼‍🤝‍👨🏾","👩🏼‍🤝‍👨🏿","👩🏽‍🤝‍👨🏻","👩🏽‍🤝‍👨🏼","👫🏽","👩🏽‍🤝‍👨🏾","👩🏽‍🤝‍👨🏿","👩🏾‍🤝‍👨🏻","👩🏾‍🤝‍👨🏼","👩🏾‍🤝‍👨🏽","👫🏾","👩🏾‍🤝‍👨🏿","👩🏿‍🤝‍👨🏻","👩🏿‍🤝‍👨🏼","👩🏿‍🤝‍👨🏽","👩🏿‍🤝‍👨🏾","👫🏿"]},{"e":"👬","opts":["👬","👬🏻","👨🏻‍🤝‍👨🏼","👨🏻‍🤝‍👨🏽","👨🏻‍🤝‍👨🏾","👨🏻‍🤝‍👨🏿","👨🏼‍🤝‍👨🏻","👬🏼","👨🏼‍🤝‍👨🏽","👨🏼‍🤝‍👨🏾","👨🏼‍🤝‍👨🏿","👨🏽‍🤝‍👨🏻","👨🏽‍🤝‍👨🏼","👬🏽","👨🏽‍🤝‍👨🏾","👨🏽‍🤝‍👨🏿","👨🏾‍🤝‍👨🏻","👨🏾‍🤝‍👨🏼","👨🏾‍🤝‍👨🏽","👬🏾","👨🏾‍🤝‍👨🏿","👨🏿‍🤝‍👨🏻","👨🏿‍🤝‍👨🏼","👨🏿‍🤝‍👨🏽","👨🏿‍🤝‍👨🏾","👬🏿"]},{"e":"💏","opts":["💏"]},{"e":"👩‍❤️‍💋‍👨","opts":["👩‍❤️‍💋‍👨"]},{"e":"👨‍❤️‍💋‍👨","opts":["👨‍❤️‍💋‍👨"]},{"e":"👩‍❤️‍💋‍👩","opts":["👩‍❤️‍💋‍👩"]},{"e":"💑","opts":["💑"]},{"e":"👩‍❤️‍👨","opts":["👩‍❤️‍👨"]},{"e":"👨‍❤️‍👨","opts":["👨‍❤️‍👨"]},{"e":"👩‍❤️‍👩","opts":["👩‍❤️‍👩"]},{"e":"👪️","opts":["👪️"]},{"e":"👨‍👩‍👦","opts":["👨‍👩‍👦"]},{"e":"👨‍👩‍👧","opts":["👨‍👩‍👧"]},{"e":"👨‍👩‍👧‍👦","opts":["👨‍👩‍👧‍👦"]},{"e":"👨‍👩‍👦‍👦","opts":["👨‍👩‍👦‍👦"]},{"e":"👨‍👩‍👧‍👧","opts":["👨‍👩‍👧‍👧"]},{"e":"👨‍👨‍👦","opts":["👨‍👨‍👦"]},{"e":"👨‍👨‍👧","opts":["👨‍👨‍👧"]},{"e":"👨‍👨‍👧‍👦","opts":["👨‍👨‍👧‍👦"]},{"e":"👨‍👨‍👦‍👦","opts":["👨‍👨‍👦‍👦"]},{"e":"👨‍👨‍👧‍👧","opts":["👨‍👨‍👧‍👧"]},{"e":"👩‍👩‍👦","opts":["👩‍👩‍👦"]},{"e":"👩‍👩‍👧","opts":["👩‍👩‍👧"]},{"e":"👩‍👩‍👧‍👦","opts":["👩‍👩‍👧‍👦"]},{"e":"👩‍👩‍👦‍👦","opts":["👩‍👩‍👦‍👦"]},{"e":"👩‍👩‍👧‍👧","opts":["👩‍👩‍👧‍👧"]},{"e":"👨‍👦","opts":["👨‍👦"]},{"e":"👨‍👦‍👦","opts":["👨‍👦‍👦"]},{"e":"👨‍👧","opts":["👨‍👧"]},{"e":"👨‍👧‍👦","opts":["👨‍👧‍👦"]},{"e":"👨‍👧‍👧","opts":["👨‍👧‍👧"]},{"e":"👩‍👦","opts":["👩‍👦"]},{"e":"👩‍👦‍👦","opts":["👩‍👦‍👦"]},{"e":"👩‍👧","opts":["👩‍👧"]},{"e":"👩‍👧‍👦","opts":["👩‍👧‍👦"]},{"e":"👩‍👧‍👧","opts":["👩‍👧‍👧"]},{"e":"🗣️","opts":["🗣️"]},{"e":"👤","opts":["👤"]},{"e":"👥","opts":["👥"]},{"e":"🫂","opts":["🫂"]},{"e":"👣","opts":["👣"]}],"animals-nature":[{"e":"🐵","opts":["🐵"]},{"e":"🐒","opts":["🐒"]},{"e":"🦍","opts":["🦍"]},{"e":"🦧","opts":["🦧"]},{"e":"🐶","opts":["🐶"]},{"e":"🐕️","opts":["🐕️"]},{"e":"🦮","opts":["🦮"]},{"e":"🐕‍🦺","opts":["🐕‍🦺"]},{"e":"🐩","opts":["🐩"]},{"e":"🐺","opts":["🐺"]},{"e":"🦊","opts":["🦊"]},{"e":"🦝","opts":["🦝"]},{"e":"🐱","opts":["🐱"]},{"e":"🐈️","opts":["🐈️"]},{"e":"🐈‍⬛","opts":["🐈‍⬛"]},{"e":"🦁","opts":["🦁"]},{"e":"🐯","opts":["🐯"]},{"e":"🐅","opts":["🐅"]},{"e":"🐆","opts":["🐆"]},{"e":"🐴","opts":["🐴"]},{"e":"🐎","opts":["🐎"]},{"e":"🦄","opts":["🦄"]},{"e":"🦓","opts":["🦓"]},{"e":"🦌","opts":["🦌"]},{"e":"🦬","opts":["🦬"]},{"e":"🐮","opts":["🐮"]},{"e":"🐂","opts":["🐂"]},{"e":"🐃","opts":["🐃"]},{"e":"🐄","opts":["🐄"]},{"e":"🐷","opts":["🐷"]},{"e":"🐖","opts":["🐖"]},{"e":"🐗","opts":["🐗"]},{"e":"🐽","opts":["🐽"]},{"e":"🐏","opts":["🐏"]},{"e":"🐑","opts":["🐑"]},{"e":"🐐","opts":["🐐"]},{"e":"🐪","opts":["🐪"]},{"e":"🐫","opts":["🐫"]},{"e":"🦙","opts":["🦙"]},{"e":"🦒","opts":["🦒"]},{"e":"🐘","opts":["🐘"]},{"e":"🦣","opts":["🦣"]},{"e":"🦏","opts":["🦏"]},{"e":"🦛","opts":["🦛"]},{"e":"🐭","opts":["🐭"]},{"e":"🐁","opts":["🐁"]},{"e":"🐀","opts":["🐀"]},{"e":"🐹","opts":["🐹"]},{"e":"🐰","opts":["🐰"]},{"e":"🐇","opts":["🐇"]},{"e":"🐿️","opts":["🐿️"]},{"e":"🦫","opts":["🦫"]},{"e":"🦔","opts":["🦔"]},{"e":"🦇","opts":["🦇"]},{"e":"🐻","opts":["🐻"]},{"e":"🐻‍❄️","opts":["🐻‍❄️"]},{"e":"🐨","opts":["🐨"]},{"e":"🐼","opts":["🐼"]},{"e":"🦥","opts":["🦥"]},{"e":"🦦","opts":["🦦"]},{"e":"🦨","opts":["🦨"]},{"e":"🦘","opts":["🦘"]},{"e":"🦡","opts":["🦡"]},{"e":"🐾","opts":["🐾"]},{"e":"🦃","opts":["🦃"]},{"e":"🐔","opts":["🐔"]},{"e":"🐓","opts":["🐓"]},{"e":"🐣","opts":["🐣"]},{"e":"🐤","opts":["🐤"]},{"e":"🐥","opts":["🐥"]},{"e":"🐦️","opts":["🐦️"]},{"e":"🐧","opts":["🐧"]},{"e":"🕊️","opts":["🕊️"]},{"e":"🦅","opts":["🦅"]},{"e":"🦆","opts":["🦆"]},{"e":"🦢","opts":["🦢"]},{"e":"🦉","opts":["🦉"]},{"e":"🦤","opts":["🦤"]},{"e":"🪶","opts":["🪶"]},{"e":"🦩","opts":["🦩"]},{"e":"🦚","opts":["🦚"]},{"e":"🦜","opts":["🦜"]},{"e":"🐸","opts":["🐸"]},{"e":"🐊","opts":["🐊"]},{"e":"🐢","opts":["🐢"]},{"e":"🦎","opts":["🦎"]},{"e":"🐍","opts":["🐍"]},{"e":"🐲","opts":["🐲"]},{"e":"🐉","opts":["🐉"]},{"e":"🦕","opts":["🦕"]},{"e":"🦖","opts":["🦖"]},{"e":"🐳","opts":["🐳"]},{"e":"🐋","opts":["🐋"]},{"e":"🐬","opts":["🐬"]},{"e":"🦭","opts":["🦭"]},{"e":"🐟️","opts":["🐟️"]},{"e":"🐠","opts":["🐠"]},{"e":"🐡","opts":["🐡"]},{"e":"🦈","opts":["🦈"]},{"e":"🐙","opts":["🐙"]},{"e":"🐚","opts":["🐚"]},{"e":"🐌","opts":["🐌"]},{"e":"🦋","opts":["🦋"]},{"e":"🐛","opts":["🐛"]},{"e":"🐜","opts":["🐜"]},{"e":"🐝","opts":["🐝"]},{"e":"🪲","opts":["🪲"]},{"e":"🐞","opts":["🐞"]},{"e":"🦗","opts":["🦗"]},{"e":"🪳","opts":["🪳"]},{"e":"🕷️","opts":["🕷️"]},{"e":"🕸️","opts":["🕸️"]},{"e":"🦂","opts":["🦂"]},{"e":"🦟","opts":["🦟"]},{"e":"🪰","opts":["🪰"]},{"e":"🪱","opts":["🪱"]},{"e":"🦠","opts":["🦠"]},{"e":"💐","opts":["💐"]},{"e":"🌸","opts":["🌸"]},{"e":"💮","opts":["💮"]},{"e":"🏵️","opts":["🏵️"]},{"e":"🌹","opts":["🌹"]},{"e":"🥀","opts":["🥀"]},{"e":"🌺","opts":["🌺"]},{"e":"🌻","opts":["🌻"]},{"e":"🌼","opts":["🌼"]},{"e":"🌷","opts":["🌷"]},{"e":"🌱","opts":["🌱"]},{"e":"🪴","opts":["🪴"]},{"e":"🌲","opts":["🌲"]},{"e":"🌳","opts":["🌳"]},{"e":"🌴","opts":["🌴"]},{"e":"🌵","opts":["🌵"]},{"e":"🌾","opts":["🌾"]},{"e":"🌿","opts":["🌿"]},{"e":"☘️","opts":["☘️"]},{"e":"🍀","opts":["🍀"]},{"e":"🍁","opts":["🍁"]},{"e":"🍂","opts":["🍂"]},{"e":"🍃","opts":["🍃"]}],"food-drink":[{"e":"🍇","opts":["🍇"]},{"e":"🍈","opts":["🍈"]},{"e":"🍉","opts":["🍉"]},{"e":"🍊","opts":["🍊"]},{"e":"🍋","opts":["🍋"]},{"e":"🍌","opts":["🍌"]},{"e":"🍍","opts":["🍍"]},{"e":"🥭","opts":["🥭"]},{"e":"🍎","opts":["🍎"]},{"e":"🍏","opts":["🍏"]},{"e":"🍐","opts":["🍐"]},{"e":"🍑","opts":["🍑"]},{"e":"🍒","opts":["🍒"]},{"e":"🍓","opts":["🍓"]},{"e":"🫐","opts":["🫐"]},{"e":"🥝","opts":["🥝"]},{"e":"🍅","opts":["🍅"]},{"e":"🫒","opts":["🫒"]},{"e":"🥥","opts":["🥥"]},{"e":"🥑","opts":["🥑"]},{"e":"🍆","opts":["🍆"]},{"e":"🥔","opts":["🥔"]},{"e":"🥕","opts":["🥕"]},{"e":"🌽","opts":["🌽"]},{"e":"🌶️","opts":["🌶️"]},{"e":"🫑","opts":["🫑"]},{"e":"🥒","opts":["🥒"]},{"e":"🥬","opts":["🥬"]},{"e":"🥦","opts":["🥦"]},{"e":"🧄","opts":["🧄"]},{"e":"🧅","opts":["🧅"]},{"e":"🍄","opts":["🍄"]},{"e":"🥜","opts":["🥜"]},{"e":"🌰","opts":["🌰"]},{"e":"🍞","opts":["🍞"]},{"e":"🥐","opts":["🥐"]},{"e":"🥖","opts":["🥖"]},{"e":"🫓","opts":["🫓"]},{"e":"🥨","opts":["🥨"]},{"e":"🥯","opts":["🥯"]},{"e":"🥞","opts":["🥞"]},{"e":"🧇","opts":["🧇"]},{"e":"🧀","opts":["🧀"]},{"e":"🍖","opts":["🍖"]},{"e":"🍗","opts":["🍗"]},{"e":"🥩","opts":["🥩"]},{"e":"🥓","opts":["🥓"]},{"e":"🍔","opts":["🍔"]},{"e":"🍟","opts":["🍟"]},{"e":"🍕","opts":["🍕"]},{"e":"🌭","opts":["🌭"]},{"e":"🥪","opts":["🥪"]},{"e":"🌮","opts":["🌮"]},{"e":"🌯","opts":["🌯"]},{"e":"🫔","opts":["🫔"]},{"e":"🥙","opts":["🥙"]},{"e":"🧆","opts":["🧆"]},{"e":"🥚","opts":["🥚"]},{"e":"🍳","opts":["🍳"]},{"e":"🥘","opts":["🥘"]},{"e":"🍲","opts":["🍲"]},{"e":"🫕","opts":["🫕"]},{"e":"🥣","opts":["🥣"]},{"e":"🥗","opts":["🥗"]},{"e":"🍿","opts":["🍿"]},{"e":"🧈","opts":["🧈"]},{"e":"🧂","opts":["🧂"]},{"e":"🥫","opts":["🥫"]},{"e":"🍱","opts":["🍱"]},{"e":"🍘","opts":["🍘"]},{"e":"🍙","opts":["🍙"]},{"e":"🍚","opts":["🍚"]},{"e":"🍛","opts":["🍛"]},{"e":"🍜","opts":["🍜"]},{"e":"🍝","opts":["🍝"]},{"e":"🍠","opts":["🍠"]},{"e":"🍢","opts":["🍢"]},{"e":"🍣","opts":["🍣"]},{"e":"🍤","opts":["🍤"]},{"e":"🍥","opts":["🍥"]},{"e":"🥮","opts":["🥮"]},{"e":"🍡","opts":["🍡"]},{"e":"🥟","opts":["🥟"]},{"e":"🥠","opts":["🥠"]},{"e":"🥡","opts":["🥡"]},{"e":"🦀","opts":["🦀"]},{"e":"🦞","opts":["🦞"]},{"e":"🦐","opts":["🦐"]},{"e":"🦑","opts":["🦑"]},{"e":"🦪","opts":["🦪"]},{"e":"🍦","opts":["🍦"]},{"e":"🍧","opts":["🍧"]},{"e":"🍨","opts":["🍨"]},{"e":"🍩","opts":["🍩"]},{"e":"🍪","opts":["🍪"]},{"e":"🎂","opts":["🎂"]},{"e":"🍰","opts":["🍰"]},{"e":"🧁","opts":["🧁"]},{"e":"🥧","opts":["🥧"]},{"e":"🍫","opts":["🍫"]},{"e":"🍬","opts":["🍬"]},{"e":"🍭","opts":["🍭"]},{"e":"🍮","opts":["🍮"]},{"e":"🍯","opts":["🍯"]},{"e":"🍼","opts":["🍼"]},{"e":"🥛","opts":["🥛"]},{"e":"☕️","opts":["☕️"]},{"e":"🫖","opts":["🫖"]},{"e":"🍵","opts":["🍵"]},{"e":"🍶","opts":["🍶"]},{"e":"🍾","opts":["🍾"]},{"e":"🍷","opts":["🍷"]},{"e":"🍸️","opts":["🍸️"]},{"e":"🍹","opts":["🍹"]},{"e":"🍺","opts":["🍺"]},{"e":"🍻","opts":["🍻"]},{"e":"🥂","opts":["🥂"]},{"e":"🥃","opts":["🥃"]},{"e":"🥤","opts":["🥤"]},{"e":"🧋","opts":["🧋"]},{"e":"🧃","opts":["🧃"]},{"e":"🧉","opts":["🧉"]},{"e":"🧊","opts":["🧊"]},{"e":"🥢","opts":["🥢"]},{"e":"🍽️","opts":["🍽️"]},{"e":"🍴","opts":["🍴"]},{"e":"🥄","opts":["🥄"]},{"e":"🔪","opts":["🔪"]},{"e":"🏺","opts":["🏺"]}],"travel-places":[{"e":"🌍️","opts":["🌍️"]},{"e":"🌎️","opts":["🌎️"]},{"e":"🌏️","opts":["🌏️"]},{"e":"🌐","opts":["🌐"]},{"e":"🗺️","opts":["🗺️"]},{"e":"🗾","opts":["🗾"]},{"e":"🧭","opts":["🧭"]},{"e":"🏔️","opts":["🏔️"]},{"e":"⛰️","opts":["⛰️"]},{"e":"🌋","opts":["🌋"]},{"e":"🗻","opts":["🗻"]},{"e":"🏕️","opts":["🏕️"]},{"e":"🏖️","opts":["🏖️"]},{"e":"🏜️","opts":["🏜️"]},{"e":"🏝️","opts":["🏝️"]},{"e":"🏞️","opts":["🏞️"]},{"e":"🏟️","opts":["🏟️"]},{"e":"🏛️","opts":["🏛️"]},{"e":"🏗️","opts":["🏗️"]},{"e":"🧱","opts":["🧱"]},{"e":"🪨","opts":["🪨"]},{"e":"🪵","opts":["🪵"]},{"e":"🛖","opts":["🛖"]},{"e":"🏘️","opts":["🏘️"]},{"e":"🏚️","opts":["🏚️"]},{"e":"🏠️","opts":["🏠️"]},{"e":"🏡","opts":["🏡"]},{"e":"🏢","opts":["🏢"]},{"e":"🏣","opts":["🏣"]},{"e":"🏤","opts":["🏤"]},{"e":"🏥","opts":["🏥"]},{"e":"🏦","opts":["🏦"]},{"e":"🏨","opts":["🏨"]},{"e":"🏩","opts":["🏩"]},{"e":"🏪","opts":["🏪"]},{"e":"🏫","opts":["🏫"]},{"e":"🏬","opts":["🏬"]},{"e":"🏭️","opts":["🏭️"]},{"e":"🏯","opts":["🏯"]},{"e":"🏰","opts":["🏰"]},{"e":"💒","opts":["💒"]},{"e":"🗼","opts":["🗼"]},{"e":"🗽","opts":["🗽"]},{"e":"⛪️","opts":["⛪️"]},{"e":"🕌","opts":["🕌"]},{"e":"🛕","opts":["🛕"]},{"e":"🕍","opts":["🕍"]},{"e":"⛩️","opts":["⛩️"]},{"e":"🕋","opts":["🕋"]},{"e":"⛲️","opts":["⛲️"]},{"e":"⛺️","opts":["⛺️"]},{"e":"🌁","opts":["🌁"]},{"e":"🌃","opts":["🌃"]},{"e":"🏙️","opts":["🏙️"]},{"e":"🌄","opts":["🌄"]},{"e":"🌅","opts":["🌅"]},{"e":"🌆","opts":["🌆"]},{"e":"🌇","opts":["🌇"]},{"e":"🌉","opts":["🌉"]},{"e":"♨️","opts":["♨️"]},{"e":"🎠","opts":["🎠"]},{"e":"🎡","opts":["🎡"]},{"e":"🎢","opts":["🎢"]},{"e":"💈","opts":["💈"]},{"e":"🎪","opts":["🎪"]},{"e":"🚂","opts":["🚂"]},{"e":"🚃","opts":["🚃"]},{"e":"🚄","opts":["🚄"]},{"e":"🚅","opts":["🚅"]},{"e":"🚆","opts":["🚆"]},{"e":"🚇️","opts":["🚇️"]},{"e":"🚈","opts":["🚈"]},{"e":"🚉","opts":["🚉"]},{"e":"🚊","opts":["🚊"]},{"e":"🚝","opts":["🚝"]},{"e":"🚞","opts":["🚞"]},{"e":"🚋","opts":["🚋"]},{"e":"🚌","opts":["🚌"]},{"e":"🚍️","opts":["🚍️"]},{"e":"🚎","opts":["🚎"]},{"e":"🚐","opts":["🚐"]},{"e":"🚑️","opts":["🚑️"]},{"e":"🚒","opts":["🚒"]},{"e":"🚓","opts":["🚓"]},{"e":"🚔️","opts":["🚔️"]},{"e":"🚕","opts":["🚕"]},{"e":"🚖","opts":["🚖"]},{"e":"🚗","opts":["🚗"]},{"e":"🚘️","opts":["🚘️"]},{"e":"🚙","opts":["🚙"]},{"e":"🛻","opts":["🛻"]},{"e":"🚚","opts":["🚚"]},{"e":"🚛","opts":["🚛"]},{"e":"🚜","opts":["🚜"]},{"e":"🏎️","opts":["🏎️"]},{"e":"🏍️","opts":["🏍️"]},{"e":"🛵","opts":["🛵"]},{"e":"🦽","opts":["🦽"]},{"e":"🦼","opts":["🦼"]},{"e":"🛺","opts":["🛺"]},{"e":"🚲️","opts":["🚲️"]},{"e":"🛴","opts":["🛴"]},{"e":"🛹","opts":["🛹"]},{"e":"🛼","opts":["🛼"]},{"e":"🚏","opts":["🚏"]},{"e":"🛣️","opts":["🛣️"]},{"e":"🛤️","opts":["🛤️"]},{"e":"🛢️","opts":["🛢️"]},{"e":"⛽️","opts":["⛽️"]},{"e":"🚨","opts":["🚨"]},{"e":"🚥","opts":["🚥"]},{"e":"🚦","opts":["🚦"]},{"e":"🛑","opts":["🛑"]},{"e":"🚧","opts":["🚧"]},{"e":"⚓️","opts":["⚓️"]},{"e":"⛵️","opts":["⛵️"]},{"e":"🛶","opts":["🛶"]},{"e":"🚤","opts":["🚤"]},{"e":"🛳️","opts":["🛳️"]},{"e":"⛴️","opts":["⛴️"]},{"e":"🛥️","opts":["🛥️"]},{"e":"🚢","opts":["🚢"]},{"e":"✈️","opts":["✈️"]},{"e":"🛩️","opts":["🛩️"]},{"e":"🛫","opts":["🛫"]},{"e":"🛬","opts":["🛬"]},{"e":"🪂","opts":["🪂"]},{"e":"💺","opts":["💺"]},{"e":"🚁","opts":["🚁"]},{"e":"🚟","opts":["🚟"]},{"e":"🚠","opts":["🚠"]},{"e":"🚡","opts":["🚡"]},{"e":"🛰️","opts":["🛰️"]},{"e":"🚀","opts":["🚀"]},{"e":"🛸","opts":["🛸"]},{"e":"🛎️","opts":["🛎️"]},{"e":"🧳","opts":["🧳"]},{"e":"⌛️","opts":["⌛️"]},{"e":"⏳️","opts":["⏳️"]},{"e":"⌚️","opts":["⌚️"]},{"e":"⏰","opts":["⏰"]},{"e":"⏱️","opts":["⏱️"]},{"e":"⏲️","opts":["⏲️"]},{"e":"🕰️","opts":["🕰️"]},{"e":"🕛️","opts":["🕛️"]},{"e":"🕧️","opts":["🕧️"]},{"e":"🕐️","opts":["🕐️"]},{"e":"🕜️","opts":["🕜️"]},{"e":"🕑️","opts":["🕑️"]},{"e":"🕝️","opts":["🕝️"]},{"e":"🕒️","opts":["🕒️"]},{"e":"🕞️","opts":["🕞️"]},{"e":"🕓️","opts":["🕓️"]},{"e":"🕟️","opts":["🕟️"]},{"e":"🕔️","opts":["🕔️"]},{"e":"🕠️","opts":["🕠️"]},{"e":"🕕️","opts":["🕕️"]},{"e":"🕡️","opts":["🕡️"]},{"e":"🕖️","opts":["🕖️"]},{"e":"🕢️","opts":["🕢️"]},{"e":"🕗️","opts":["🕗️"]},{"e":"🕣️","opts":["🕣️"]},{"e":"🕘️","opts":["🕘️"]},{"e":"🕤️","opts":["🕤️"]},{"e":"🕙️","opts":["🕙️"]},{"e":"🕥️","opts":["🕥️"]},{"e":"🕚️","opts":["🕚️"]},{"e":"🕦️","opts":["🕦️"]},{"e":"🌑","opts":["🌑"]},{"e":"🌒","opts":["🌒"]},{"e":"🌓","opts":["🌓"]},{"e":"🌔","opts":["🌔"]},{"e":"🌕️","opts":["🌕️"]},{"e":"🌖","opts":["🌖"]},{"e":"🌗","opts":["🌗"]},{"e":"🌘","opts":["🌘"]},{"e":"🌙","opts":["🌙"]},{"e":"🌚","opts":["🌚"]},{"e":"🌛","opts":["🌛"]},{"e":"🌜️","opts":["🌜️"]},{"e":"🌡️","opts":["🌡️"]},{"e":"☀️","opts":["☀️"]},{"e":"🌝","opts":["🌝"]},{"e":"🌞","opts":["🌞"]},{"e":"🪐","opts":["🪐"]},{"e":"⭐️","opts":["⭐️"]},{"e":"🌟","opts":["🌟"]},{"e":"🌠","opts":["🌠"]},{"e":"🌌","opts":["🌌"]},{"e":"☁️","opts":["☁️"]},{"e":"⛅️","opts":["⛅️"]},{"e":"⛈️","opts":["⛈️"]},{"e":"🌤️","opts":["🌤️"]},{"e":"🌥️","opts":["🌥️"]},{"e":"🌦️","opts":["🌦️"]},{"e":"🌧️","opts":["🌧️"]},{"e":"🌨️","opts":["🌨️"]},{"e":"🌩️","opts":["🌩️"]},{"e":"🌪️","opts":["🌪️"]},{"e":"🌫️","opts":["🌫️"]},{"e":"🌬️","opts":["🌬️"]},{"e":"🌀","opts":["🌀"]},{"e":"🌈","opts":["🌈"]},{"e":"🌂","opts":["🌂"]},{"e":"☂️","opts":["☂️"]},{"e":"☔️","opts":["☔️"]},{"e":"⛱️","opts":["⛱️"]},{"e":"⚡️","opts":["⚡️"]},{"e":"❄️","opts":["❄️"]},{"e":"☃️","opts":["☃️"]},{"e":"⛄️","opts":["⛄️"]},{"e":"☄️","opts":["☄️"]},{"e":"🔥","opts":["🔥"]},{"e":"💧","opts":["💧"]},{"e":"🌊","opts":["🌊"]}],"activities":[{"e":"🎃","opts":["🎃"]},{"e":"🎄","opts":["🎄"]},{"e":"🎆","opts":["🎆"]},{"e":"🎇","opts":["🎇"]},{"e":"🧨","opts":["🧨"]},{"e":"✨","opts":["✨"]},{"e":"🎈","opts":["🎈"]},{"e":"🎉","opts":["🎉"]},{"e":"🎊","opts":["🎊"]},{"e":"🎋","opts":["🎋"]},{"e":"🎍","opts":["🎍"]},{"e":"🎎","opts":["🎎"]},{"e":"🎏","opts":["🎏"]},{"e":"🎐","opts":["🎐"]},{"e":"🎑","opts":["🎑"]},{"e":"🧧","opts":["🧧"]},{"e":"🎀","opts":["🎀"]},{"e":"🎁","opts":["🎁"]},{"e":"🎗️","opts":["🎗️"]},{"e":"🎟️","opts":["🎟️"]},{"e":"🎫","opts":["🎫"]},{"e":"🎖️","opts":["🎖️"]},{"e":"🏆️","opts":["🏆️"]},{"e":"🏅","opts":["🏅"]},{"e":"🥇","opts":["🥇"]},{"e":"🥈","opts":["🥈"]},{"e":"🥉","opts":["🥉"]},{"e":"⚽️","opts":["⚽️"]},{"e":"⚾️","opts":["⚾️"]},{"e":"🥎","opts":["🥎"]},{"e":"🏀","opts":["🏀"]},{"e":"🏐","opts":["🏐"]},{"e":"🏈","opts":["🏈"]},{"e":"🏉","opts":["🏉"]},{"e":"🎾","opts":["🎾"]},{"e":"🥏","opts":["🥏"]},{"e":"🎳","opts":["🎳"]},{"e":"🏏","opts":["🏏"]},{"e":"🏑","opts":["🏑"]},{"e":"🏒","opts":["🏒"]},{"e":"🥍","opts":["🥍"]},{"e":"🏓","opts":["🏓"]},{"e":"🏸","opts":["🏸"]},{"e":"🥊","opts":["🥊"]},{"e":"🥋","opts":["🥋"]},{"e":"🥅","opts":["🥅"]},{"e":"⛳️","opts":["⛳️"]},{"e":"⛸️","opts":["⛸️"]},{"e":"🎣","opts":["🎣"]},{"e":"🤿","opts":["🤿"]},{"e":"🎽","opts":["🎽"]},{"e":"🎿","opts":["🎿"]},{"e":"🛷","opts":["🛷"]},{"e":"🥌","opts":["🥌"]},{"e":"🎯","opts":["🎯"]},{"e":"🪀","opts":["🪀"]},{"e":"🪁","opts":["🪁"]},{"e":"🎱","opts":["🎱"]},{"e":"🔮","opts":["🔮"]},{"e":"🪄","opts":["🪄"]},{"e":"🧿","opts":["🧿"]},{"e":"🎮️","opts":["🎮️"]},{"e":"🕹️","opts":["🕹️"]},{"e":"🎰","opts":["🎰"]},{"e":"🎲","opts":["🎲"]},{"e":"🧩","opts":["🧩"]},{"e":"🧸","opts":["🧸"]},{"e":"🪅","opts":["🪅"]},{"e":"🪆","opts":["🪆"]},{"e":"♠️","opts":["♠️"]},{"e":"♥️","opts":["♥️"]},{"e":"♦️","opts":["♦️"]},{"e":"♣️","opts":["♣️"]},{"e":"♟️","opts":["♟️"]},{"e":"🃏","opts":["🃏"]},{"e":"🀄️","opts":["🀄️"]},{"e":"🎴","opts":["🎴"]},{"e":"🎭️","opts":["🎭️"]},{"e":"🖼️","opts":["🖼️"]},{"e":"🎨","opts":["🎨"]},{"e":"🧵","opts":["🧵"]},{"e":"🪡","opts":["🪡"]},{"e":"🧶","opts":["🧶"]},{"e":"🪢","opts":["🪢"]}],"objects":[{"e":"👓️","opts":["👓️"]},{"e":"🕶️","opts":["🕶️"]},{"e":"🥽","opts":["🥽"]},{"e":"🥼","opts":["🥼"]},{"e":"🦺","opts":["🦺"]},{"e":"👔","opts":["👔"]},{"e":"👕","opts":["👕"]},{"e":"👖","opts":["👖"]},{"e":"🧣","opts":["🧣"]},{"e":"🧤","opts":["🧤"]},{"e":"🧥","opts":["🧥"]},{"e":"🧦","opts":["🧦"]},{"e":"👗","opts":["👗"]},{"e":"👘","opts":["👘"]},{"e":"🥻","opts":["🥻"]},{"e":"🩱","opts":["🩱"]},{"e":"🩲","opts":["🩲"]},{"e":"🩳","opts":["🩳"]},{"e":"👙","opts":["👙"]},{"e":"👚","opts":["👚"]},{"e":"👛","opts":["👛"]},{"e":"👜","opts":["👜"]},{"e":"👝","opts":["👝"]},{"e":"🛍️","opts":["🛍️"]},{"e":"🎒","opts":["🎒"]},{"e":"🩴","opts":["🩴"]},{"e":"👞","opts":["👞"]},{"e":"👟","opts":["👟"]},{"e":"🥾","opts":["🥾"]},{"e":"🥿","opts":["🥿"]},{"e":"👠","opts":["👠"]},{"e":"👡","opts":["👡"]},{"e":"🩰","opts":["🩰"]},{"e":"👢","opts":["👢"]},{"e":"👑","opts":["👑"]},{"e":"👒","opts":["👒"]},{"e":"🎩","opts":["🎩"]},{"e":"🎓️","opts":["🎓️"]},{"e":"🧢","opts":["🧢"]},{"e":"🪖","opts":["🪖"]},{"e":"⛑️","opts":["⛑️"]},{"e":"📿","opts":["📿"]},{"e":"💄","opts":["💄"]},{"e":"💍","opts":["💍"]},{"e":"💎","opts":["💎"]},{"e":"🔇","opts":["🔇"]},{"e":"🔈️","opts":["🔈️"]},{"e":"🔉","opts":["🔉"]},{"e":"🔊","opts":["🔊"]},{"e":"📢","opts":["📢"]},{"e":"📣","opts":["📣"]},{"e":"📯","opts":["📯"]},{"e":"🔔","opts":["🔔"]},{"e":"🔕","opts":["🔕"]},{"e":"🎼","opts":["🎼"]},{"e":"🎵","opts":["🎵"]},{"e":"🎶","opts":["🎶"]},{"e":"🎙️","opts":["🎙️"]},{"e":"🎚️","opts":["🎚️"]},{"e":"🎛️","opts":["🎛️"]},{"e":"🎤","opts":["🎤"]},{"e":"🎧️","opts":["🎧️"]},{"e":"📻️","opts":["📻️"]},{"e":"🎷","opts":["🎷"]},{"e":"🪗","opts":["🪗"]},{"e":"🎸","opts":["🎸"]},{"e":"🎹","opts":["🎹"]},{"e":"🎺","opts":["🎺"]},{"e":"🎻","opts":["🎻"]},{"e":"🪕","opts":["🪕"]},{"e":"🥁","opts":["🥁"]},{"e":"🪘","opts":["🪘"]},{"e":"📱","opts":["📱"]},{"e":"📲","opts":["📲"]},{"e":"☎️","opts":["☎️"]},{"e":"📞","opts":["📞"]},{"e":"📟️","opts":["📟️"]},{"e":"📠","opts":["📠"]},{"e":"🔋","opts":["🔋"]},{"e":"🔌","opts":["🔌"]},{"e":"💻️","opts":["💻️"]},{"e":"🖥️","opts":["🖥️"]},{"e":"🖨️","opts":["🖨️"]},{"e":"⌨️","opts":["⌨️"]},{"e":"🖱️","opts":["🖱️"]},{"e":"🖲️","opts":["🖲️"]},{"e":"💽","opts":["💽"]},{"e":"💾","opts":["💾"]},{"e":"💿️","opts":["💿️"]},{"e":"📀","opts":["📀"]},{"e":"🧮","opts":["🧮"]},{"e":"🎥","opts":["🎥"]},{"e":"🎞️","opts":["🎞️"]},{"e":"📽️","opts":["📽️"]},{"e":"🎬️","opts":["🎬️"]},{"e":"📺️","opts":["📺️"]},{"e":"📷️","opts":["📷️"]},{"e":"📸","opts":["📸"]},{"e":"📹️","opts":["📹️"]},{"e":"📼","opts":["📼"]},{"e":"🔍️","opts":["🔍️"]},{"e":"🔎","opts":["🔎"]},{"e":"🕯️","opts":["🕯️"]},{"e":"💡","opts":["💡"]},{"e":"🔦","opts":["🔦"]},{"e":"🏮","opts":["🏮"]},{"e":"🪔","opts":["🪔"]},{"e":"📔","opts":["📔"]},{"e":"📕","opts":["📕"]},{"e":"📖","opts":["📖"]},{"e":"📗","opts":["📗"]},{"e":"📘","opts":["📘"]},{"e":"📙","opts":["📙"]},{"e":"📚️","opts":["📚️"]},{"e":"📓","opts":["📓"]},{"e":"📒","opts":["📒"]},{"e":"📃","opts":["📃"]},{"e":"📜","opts":["📜"]},{"e":"📄","opts":["📄"]},{"e":"📰","opts":["📰"]},{"e":"🗞️","opts":["🗞️"]},{"e":"📑","opts":["📑"]},{"e":"🔖","opts":["🔖"]},{"e":"🏷️","opts":["🏷️"]},{"e":"💰️","opts":["💰️"]},{"e":"🪙","opts":["🪙"]},{"e":"💴","opts":["💴"]},{"e":"💵","opts":["💵"]},{"e":"💶","opts":["💶"]},{"e":"💷","opts":["💷"]},{"e":"💸","opts":["💸"]},{"e":"💳️","opts":["💳️"]},{"e":"🧾","opts":["🧾"]},{"e":"💹","opts":["💹"]},{"e":"✉️","opts":["✉️"]},{"e":"📧","opts":["📧"]},{"e":"📨","opts":["📨"]},{"e":"📩","opts":["📩"]},{"e":"📤️","opts":["📤️"]},{"e":"📥️","opts":["📥️"]},{"e":"📦️","opts":["📦️"]},{"e":"📫️","opts":["📫️"]},{"e":"📪️","opts":["📪️"]},{"e":"📬️","opts":["📬️"]},{"e":"📭️","opts":["📭️"]},{"e":"📮","opts":["📮"]},{"e":"🗳️","opts":["🗳️"]},{"e":"✏️","opts":["✏️"]},{"e":"✒️","opts":["✒️"]},{"e":"🖋️","opts":["🖋️"]},{"e":"🖊️","opts":["🖊️"]},{"e":"🖌️","opts":["🖌️"]},{"e":"🖍️","opts":["🖍️"]},{"e":"📝","opts":["📝"]},{"e":"💼","opts":["💼"]},{"e":"📁","opts":["📁"]},{"e":"📂","opts":["📂"]},{"e":"🗂️","opts":["🗂️"]},{"e":"📅","opts":["📅"]},{"e":"📆","opts":["📆"]},{"e":"🗒️","opts":["🗒️"]},{"e":"🗓️","opts":["🗓️"]},{"e":"📇","opts":["📇"]},{"e":"📈","opts":["📈"]},{"e":"📉","opts":["📉"]},{"e":"📊","opts":["📊"]},{"e":"📋️","opts":["📋️"]},{"e":"📌","opts":["📌"]},{"e":"📍","opts":["📍"]},{"e":"📎","opts":["📎"]},{"e":"🖇️","opts":["🖇️"]},{"e":"📏","opts":["📏"]},{"e":"📐","opts":["📐"]},{"e":"✂️","opts":["✂️"]},{"e":"🗃️","opts":["🗃️"]},{"e":"🗄️","opts":["🗄️"]},{"e":"🗑️","opts":["🗑️"]},{"e":"🔒️","opts":["🔒️"]},{"e":"🔓️","opts":["🔓️"]},{"e":"🔏","opts":["🔏"]},{"e":"🔐","opts":["🔐"]},{"e":"🔑","opts":["🔑"]},{"e":"🗝️","opts":["🗝️"]},{"e":"🔨","opts":["🔨"]},{"e":"🪓","opts":["🪓"]},{"e":"⛏️","opts":["⛏️"]},{"e":"⚒️","opts":["⚒️"]},{"e":"🛠️","opts":["🛠️"]},{"e":"🗡️","opts":["🗡️"]},{"e":"⚔️","opts":["⚔️"]},{"e":"🔫","opts":["🔫"]},{"e":"🪃","opts":["🪃"]},{"e":"🏹","opts":["🏹"]},{"e":"🛡️","opts":["🛡️"]},{"e":"🪚","opts":["🪚"]},{"e":"🔧","opts":["🔧"]},{"e":"🪛","opts":["🪛"]},{"e":"🔩","opts":["🔩"]},{"e":"⚙️","opts":["⚙️"]},{"e":"🗜️","opts":["🗜️"]},{"e":"⚖️","opts":["⚖️"]},{"e":"🦯","opts":["🦯"]},{"e":"🔗","opts":["🔗"]},{"e":"⛓️","opts":["⛓️"]},{"e":"🪝","opts":["🪝"]},{"e":"🧰","opts":["🧰"]},{"e":"🧲","opts":["🧲"]},{"e":"🪜","opts":["🪜"]},{"e":"⚗️","opts":["⚗️"]},{"e":"🧪","opts":["🧪"]},{"e":"🧫","opts":["🧫"]},{"e":"🧬","opts":["🧬"]},{"e":"🔬","opts":["🔬"]},{"e":"🔭","opts":["🔭"]},{"e":"📡","opts":["📡"]},{"e":"💉","opts":["💉"]},{"e":"🩸","opts":["🩸"]},{"e":"💊","opts":["💊"]},{"e":"🩹","opts":["🩹"]},{"e":"🩺","opts":["🩺"]},{"e":"🚪","opts":["🚪"]},{"e":"🛗","opts":["🛗"]},{"e":"🪞","opts":["🪞"]},{"e":"🪟","opts":["🪟"]},{"e":"🛏️","opts":["🛏️"]},{"e":"🛋️","opts":["🛋️"]},{"e":"🪑","opts":["🪑"]},{"e":"🚽","opts":["🚽"]},{"e":"🪠","opts":["🪠"]},{"e":"🚿","opts":["🚿"]},{"e":"🛁","opts":["🛁"]},{"e":"🪤","opts":["🪤"]},{"e":"🪒","opts":["🪒"]},{"e":"🧴","opts":["🧴"]},{"e":"🧷","opts":["🧷"]},{"e":"🧹","opts":["🧹"]},{"e":"🧺","opts":["🧺"]},{"e":"🧻","opts":["🧻"]},{"e":"🪣","opts":["🪣"]},{"e":"🧼","opts":["🧼"]},{"e":"🪥","opts":["🪥"]},{"e":"🧽","opts":["🧽"]},{"e":"🧯","opts":["🧯"]},{"e":"🛒","opts":["🛒"]},{"e":"🚬","opts":["🚬"]},{"e":"⚰️","opts":["⚰️"]},{"e":"🪦","opts":["🪦"]},{"e":"⚱️","opts":["⚱️"]},{"e":"🗿","opts":["🗿"]},{"e":"🪧","opts":["🪧"]}],"symbols":[{"e":"🏧","opts":["🏧"]},{"e":"🚮","opts":["🚮"]},{"e":"🚰","opts":["🚰"]},{"e":"♿️","opts":["♿️"]},{"e":"🚹️","opts":["🚹️"]},{"e":"🚺️","opts":["🚺️"]},{"e":"🚻","opts":["🚻"]},{"e":"🚼️","opts":["🚼️"]},{"e":"🚾","opts":["🚾"]},{"e":"🛂","opts":["🛂"]},{"e":"🛃","opts":["🛃"]},{"e":"🛄","opts":["🛄"]},{"e":"🛅","opts":["🛅"]},{"e":"⚠️","opts":["⚠️"]},{"e":"🚸","opts":["🚸"]},{"e":"⛔️","opts":["⛔️"]},{"e":"🚫","opts":["🚫"]},{"e":"🚳","opts":["🚳"]},{"e":"🚭️","opts":["🚭️"]},{"e":"🚯","opts":["🚯"]},{"e":"🚱","opts":["🚱"]},{"e":"🚷","opts":["🚷"]},{"e":"📵","opts":["📵"]},{"e":"🔞","opts":["🔞"]},{"e":"☢️","opts":["☢️"]},{"e":"☣️","opts":["☣️"]},{"e":"⬆️","opts":["⬆️"]},{"e":"↗️","opts":["↗️"]},{"e":"➡️","opts":["➡️"]},{"e":"↘️","opts":["↘️"]},{"e":"⬇️","opts":["⬇️"]},{"e":"↙️","opts":["↙️"]},{"e":"⬅️","opts":["⬅️"]},{"e":"↖️","opts":["↖️"]},{"e":"↕️","opts":["↕️"]},{"e":"↔️","opts":["↔️"]},{"e":"↩️","opts":["↩️"]},{"e":"↪️","opts":["↪️"]},{"e":"⤴️","opts":["⤴️"]},{"e":"⤵️","opts":["⤵️"]},{"e":"🔃","opts":["🔃"]},{"e":"🔄","opts":["🔄"]},{"e":"🔙","opts":["🔙"]},{"e":"🔚","opts":["🔚"]},{"e":"🔛","opts":["🔛"]},{"e":"🔜","opts":["🔜"]},{"e":"🔝","opts":["🔝"]},{"e":"🛐","opts":["🛐"]},{"e":"⚛️","opts":["⚛️"]},{"e":"🕉️","opts":["🕉️"]},{"e":"✡️","opts":["✡️"]},{"e":"☸️","opts":["☸️"]},{"e":"☯️","opts":["☯️"]},{"e":"✝️","opts":["✝️"]},{"e":"☦️","opts":["☦️"]},{"e":"☪️","opts":["☪️"]},{"e":"☮️","opts":["☮️"]},{"e":"🕎","opts":["🕎"]},{"e":"🔯","opts":["🔯"]},{"e":"♈️","opts":["♈️"]},{"e":"♉️","opts":["♉️"]},{"e":"♊️","opts":["♊️"]},{"e":"♋️","opts":["♋️"]},{"e":"♌️","opts":["♌️"]},{"e":"♍️","opts":["♍️"]},{"e":"♎️","opts":["♎️"]},{"e":"♏️","opts":["♏️"]},{"e":"♐️","opts":["♐️"]},{"e":"♑️","opts":["♑️"]},{"e":"♒️","opts":["♒️"]},{"e":"♓️","opts":["♓️"]},{"e":"⛎","opts":["⛎"]},{"e":"🔀","opts":["🔀"]},{"e":"🔁","opts":["🔁"]},{"e":"🔂","opts":["🔂"]},{"e":"▶️","opts":["▶️"]},{"e":"⏩️","opts":["⏩️"]},{"e":"⏭️","opts":["⏭️"]},{"e":"⏯️","opts":["⏯️"]},{"e":"◀️","opts":["◀️"]},{"e":"⏪️","opts":["⏪️"]},{"e":"⏮️","opts":["⏮️"]},{"e":"🔼","opts":["🔼"]},{"e":"⏫","opts":["⏫"]},{"e":"🔽","opts":["🔽"]},{"e":"⏬","opts":["⏬"]},{"e":"⏸️","opts":["⏸️"]},{"e":"⏹️","opts":["⏹️"]},{"e":"⏺️","opts":["⏺️"]},{"e":"⏏️","opts":["⏏️"]},{"e":"🎦","opts":["🎦"]},{"e":"🔅","opts":["🔅"]},{"e":"🔆","opts":["🔆"]},{"e":"📶","opts":["📶"]},{"e":"📳","opts":["📳"]},{"e":"📴","opts":["📴"]},{"e":"♀️","opts":["♀️"]},{"e":"♂️","opts":["♂️"]},{"e":"⚧️","opts":["⚧️"]},{"e":"✖️","opts":["✖️"]},{"e":"➕","opts":["➕"]},{"e":"➖","opts":["➖"]},{"e":"➗","opts":["➗"]},{"e":"♾️","opts":["♾️"]},{"e":"‼️","opts":["‼️"]},{"e":"⁉️","opts":["⁉️"]},{"e":"❓️","opts":["❓️"]},{"e":"❔","opts":["❔"]},{"e":"❕","opts":["❕"]},{"e":"❗️","opts":["❗️"]},{"e":"〰️","opts":["〰️"]},{"e":"💱","opts":["💱"]},{"e":"💲","opts":["💲"]},{"e":"⚕️","opts":["⚕️"]},{"e":"♻️","opts":["♻️"]},{"e":"⚜️","opts":["⚜️"]},{"e":"🔱","opts":["🔱"]},{"e":"📛","opts":["📛"]},{"e":"🔰","opts":["🔰"]},{"e":"⭕️","opts":["⭕️"]},{"e":"✅","opts":["✅"]},{"e":"☑️","opts":["☑️"]},{"e":"✔️","opts":["✔️"]},{"e":"❌","opts":["❌"]},{"e":"❎","opts":["❎"]},{"e":"➰","opts":["➰"]},{"e":"➿","opts":["➿"]},{"e":"〽️","opts":["〽️"]},{"e":"✳️","opts":["✳️"]},{"e":"✴️","opts":["✴️"]},{"e":"❇️","opts":["❇️"]},{"e":"©️","opts":["©️"]},{"e":"®️","opts":["®️"]},{"e":"™️","opts":["™️"]},{"e":"#️⃣","opts":["#️⃣"]},{"e":"*️⃣","opts":["*️⃣"]},{"e":"0️⃣","opts":["0️⃣"]},{"e":"1️⃣","opts":["1️⃣"]},{"e":"2️⃣","opts":["2️⃣"]},{"e":"3️⃣","opts":["3️⃣"]},{"e":"4️⃣","opts":["4️⃣"]},{"e":"5️⃣","opts":["5️⃣"]},{"e":"6️⃣","opts":["6️⃣"]},{"e":"7️⃣","opts":["7️⃣"]},{"e":"8️⃣","opts":["8️⃣"]},{"e":"9️⃣","opts":["9️⃣"]},{"e":"🔟","opts":["🔟"]},{"e":"🔠","opts":["🔠"]},{"e":"🔡","opts":["🔡"]},{"e":"🔢","opts":["🔢"]},{"e":"🔣","opts":["🔣"]},{"e":"🔤","opts":["🔤"]},{"e":"🅰️","opts":["🅰️"]},{"e":"🆎","opts":["🆎"]},{"e":"🅱️","opts":["🅱️"]},{"e":"🆑","opts":["🆑"]},{"e":"🆒","opts":["🆒"]},{"e":"🆓","opts":["🆓"]},{"e":"ℹ️","opts":["ℹ️"]},{"e":"🆔","opts":["🆔"]},{"e":"Ⓜ️","opts":["Ⓜ️"]},{"e":"🆕","opts":["🆕"]},{"e":"🆖","opts":["🆖"]},{"e":"🅾️","opts":["🅾️"]},{"e":"🆗","opts":["🆗"]},{"e":"🅿️","opts":["🅿️"]},{"e":"🆘","opts":["🆘"]},{"e":"🆙","opts":["🆙"]},{"e":"🆚","opts":["🆚"]},{"e":"🈁","opts":["🈁"]},{"e":"🈂️","opts":["🈂️"]},{"e":"🈷️","opts":["🈷️"]},{"e":"🈶","opts":["🈶"]},{"e":"🈯️","opts":["🈯️"]},{"e":"🉐","opts":["🉐"]},{"e":"🈹","opts":["🈹"]},{"e":"🈚️","opts":["🈚️"]},{"e":"🈲","opts":["🈲"]},{"e":"🉑","opts":["🉑"]},{"e":"🈸","opts":["🈸"]},{"e":"🈴","opts":["🈴"]},{"e":"🈳","opts":["🈳"]},{"e":"㊗️","opts":["㊗️"]},{"e":"㊙️","opts":["㊙️"]},{"e":"🈺","opts":["🈺"]},{"e":"🈵","opts":["🈵"]},{"e":"🔴","opts":["🔴"]},{"e":"🟠","opts":["🟠"]},{"e":"🟡","opts":["🟡"]},{"e":"🟢","opts":["🟢"]},{"e":"🔵","opts":["🔵"]},{"e":"🟣","opts":["🟣"]},{"e":"🟤","opts":["🟤"]},{"e":"⚫️","opts":["⚫️"]},{"e":"⚪️","opts":["⚪️"]},{"e":"🟥","opts":["🟥"]},{"e":"🟧","opts":["🟧"]},{"e":"🟨","opts":["🟨"]},{"e":"🟩","opts":["🟩"]},{"e":"🟦","opts":["🟦"]},{"e":"🟪","opts":["🟪"]},{"e":"🟫","opts":["🟫"]},{"e":"⬛️","opts":["⬛️"]},{"e":"⬜️","opts":["⬜️"]},{"e":"◼️","opts":["◼️"]},{"e":"◻️","opts":["◻️"]},{"e":"◾️","opts":["◾️"]},{"e":"◽️","opts":["◽️"]},{"e":"▪️","opts":["▪️"]},{"e":"▫️","opts":["▫️"]},{"e":"🔶","opts":["🔶"]},{"e":"🔷","opts":["🔷"]},{"e":"🔸","opts":["🔸"]},{"e":"🔹","opts":["🔹"]},{"e":"🔺","opts":["🔺"]},{"e":"🔻","opts":["🔻"]},{"e":"💠","opts":["💠"]},{"e":"🔘","opts":["🔘"]},{"e":"🔳","opts":["🔳"]},{"e":"🔲","opts":["🔲"]}],"flags":[{"e":"🏁","opts":["🏁"]},{"e":"🚩","opts":["🚩"]},{"e":"🎌","opts":["🎌"]},{"e":"🏴","opts":["🏴"]},{"e":"🏳️","opts":["🏳️"]},{"e":"🏳️‍🌈","opts":["🏳️‍🌈"]},{"e":"🏳️‍⚧️","opts":["🏳️‍⚧️"]},{"e":"🏴‍☠️","opts":["🏴‍☠️"]},{"e":"🇦🇨","opts":["🇦🇨"]},{"e":"🇦🇩","opts":["🇦🇩"]},{"e":"🇦🇪","opts":["🇦🇪"]},{"e":"🇦🇫","opts":["🇦🇫"]},{"e":"🇦🇬","opts":["🇦🇬"]},{"e":"🇦🇮","opts":["🇦🇮"]},{"e":"🇦🇱","opts":["🇦🇱"]},{"e":"🇦🇲","opts":["🇦🇲"]},{"e":"🇦🇴","opts":["🇦🇴"]},{"e":"🇦🇶","opts":["🇦🇶"]},{"e":"🇦🇷","opts":["🇦🇷"]},{"e":"🇦🇸","opts":["🇦🇸"]},{"e":"🇦🇹","opts":["🇦🇹"]},{"e":"🇦🇺","opts":["🇦🇺"]},{"e":"🇦🇼","opts":["🇦🇼"]},{"e":"🇦🇽","opts":["🇦🇽"]},{"e":"🇦🇿","opts":["🇦🇿"]},{"e":"🇧🇦","opts":["🇧🇦"]},{"e":"🇧🇧","opts":["🇧🇧"]},{"e":"🇧🇩","opts":["🇧🇩"]},{"e":"🇧🇪","opts":["🇧🇪"]},{"e":"🇧🇫","opts":["🇧🇫"]},{"e":"🇧🇬","opts":["🇧🇬"]},{"e":"🇧🇭","opts":["🇧🇭"]},{"e":"🇧🇮","opts":["🇧🇮"]},{"e":"🇧🇯","opts":["🇧🇯"]},{"e":"🇧🇱","opts":["🇧🇱"]},{"e":"🇧🇲","opts":["🇧🇲"]},{"e":"🇧🇳","opts":["🇧🇳"]},{"e":"🇧🇴","opts":["🇧🇴"]},{"e":"🇧🇶","opts":["🇧🇶"]},{"e":"🇧🇷","opts":["🇧🇷"]},{"e":"🇧🇸","opts":["🇧🇸"]},{"e":"🇧🇹","opts":["🇧🇹"]},{"e":"🇧🇻","opts":["🇧🇻"]},{"e":"🇧🇼","opts":["🇧🇼"]},{"e":"🇧🇾","opts":["🇧🇾"]},{"e":"🇧🇿","opts":["🇧🇿"]},{"e":"🇨🇦","opts":["🇨🇦"]},{"e":"🇨🇨","opts":["🇨🇨"]},{"e":"🇨🇩","opts":["🇨🇩"]},{"e":"🇨🇫","opts":["🇨🇫"]},{"e":"🇨🇬","opts":["🇨🇬"]},{"e":"🇨🇭","opts":["🇨🇭"]},{"e":"🇨🇮","opts":["🇨🇮"]},{"e":"🇨🇰","opts":["🇨🇰"]},{"e":"🇨🇱","opts":["🇨🇱"]},{"e":"🇨🇲","opts":["🇨🇲"]},{"e":"🇨🇳","opts":["🇨🇳"]},{"e":"🇨🇴","opts":["🇨🇴"]},{"e":"🇨🇵","opts":["🇨🇵"]},{"e":"🇨🇷","opts":["🇨🇷"]},{"e":"🇨🇺","opts":["🇨🇺"]},{"e":"🇨🇻","opts":["🇨🇻"]},{"e":"🇨🇼","opts":["🇨🇼"]},{"e":"🇨🇽","opts":["🇨🇽"]},{"e":"🇨🇾","opts":["🇨🇾"]},{"e":"🇨🇿","opts":["🇨🇿"]},{"e":"🇩🇪","opts":["🇩🇪"]},{"e":"🇩🇬","opts":["🇩🇬"]},{"e":"🇩🇯","opts":["🇩🇯"]},{"e":"🇩🇰","opts":["🇩🇰"]},{"e":"🇩🇲","opts":["🇩🇲"]},{"e":"🇩🇴","opts":["🇩🇴"]},{"e":"🇩🇿","opts":["🇩🇿"]},{"e":"🇪🇦","opts":["🇪🇦"]},{"e":"🇪🇨","opts":["🇪🇨"]},{"e":"🇪🇪","opts":["🇪🇪"]},{"e":"🇪🇬","opts":["🇪🇬"]},{"e":"🇪🇭","opts":["🇪🇭"]},{"e":"🇪🇷","opts":["🇪🇷"]},{"e":"🇪🇸","opts":["🇪🇸"]},{"e":"🇪🇹","opts":["🇪🇹"]},{"e":"🇪🇺","opts":["🇪🇺"]},{"e":"🇫🇮","opts":["🇫🇮"]},{"e":"🇫🇯","opts":["🇫🇯"]},{"e":"🇫🇰","opts":["🇫🇰"]},{"e":"🇫🇲","opts":["🇫🇲"]},{"e":"🇫🇴","opts":["🇫🇴"]},{"e":"🇫🇷","opts":["🇫🇷"]},{"e":"🇬🇦","opts":["🇬🇦"]},{"e":"🇬🇧","opts":["🇬🇧"]},{"e":"🇬🇩","opts":["🇬🇩"]},{"e":"🇬🇪","opts":["🇬🇪"]},{"e":"🇬🇫","opts":["🇬🇫"]},{"e":"🇬🇬","opts":["🇬🇬"]},{"e":"🇬🇭","opts":["🇬🇭"]},{"e":"🇬🇮","opts":["🇬🇮"]},{"e":"🇬🇱","opts":["🇬🇱"]},{"e":"🇬🇲","opts":["🇬🇲"]},{"e":"🇬🇳","opts":["🇬🇳"]},{"e":"🇬🇵","opts":["🇬🇵"]},{"e":"🇬🇶","opts":["🇬🇶"]},{"e":"🇬🇷","opts":["🇬🇷"]},{"e":"🇬🇸","opts":["🇬🇸"]},{"e":"🇬🇹","opts":["🇬🇹"]},{"e":"🇬🇺","opts":["🇬🇺"]},{"e":"🇬🇼","opts":["🇬🇼"]},{"e":"🇬🇾","opts":["🇬🇾"]},{"e":"🇭🇰","opts":["🇭🇰"]},{"e":"🇭🇲","opts":["🇭🇲"]},{"e":"🇭🇳","opts":["🇭🇳"]},{"e":"🇭🇷","opts":["🇭🇷"]},{"e":"🇭🇹","opts":["🇭🇹"]},{"e":"🇭🇺","opts":["🇭🇺"]},{"e":"🇮🇨","opts":["🇮🇨"]},{"e":"🇮🇩","opts":["🇮🇩"]},{"e":"🇮🇪","opts":["🇮🇪"]},{"e":"🇮🇱","opts":["🇮🇱"]},{"e":"🇮🇲","opts":["🇮🇲"]},{"e":"🇮🇳","opts":["🇮🇳"]},{"e":"🇮🇴","opts":["🇮🇴"]},{"e":"🇮🇶","opts":["🇮🇶"]},{"e":"🇮🇷","opts":["🇮🇷"]},{"e":"🇮🇸","opts":["🇮🇸"]},{"e":"🇮🇹","opts":["🇮🇹"]},{"e":"🇯🇪","opts":["🇯🇪"]},{"e":"🇯🇲","opts":["🇯🇲"]},{"e":"🇯🇴","opts":["🇯🇴"]},{"e":"🇯🇵","opts":["🇯🇵"]},{"e":"🇰🇪","opts":["🇰🇪"]},{"e":"🇰🇬","opts":["🇰🇬"]},{"e":"🇰🇭","opts":["🇰🇭"]},{"e":"🇰🇮","opts":["🇰🇮"]},{"e":"🇰🇲","opts":["🇰🇲"]},{"e":"🇰🇳","opts":["🇰🇳"]},{"e":"🇰🇵","opts":["🇰🇵"]},{"e":"🇰🇷","opts":["🇰🇷"]},{"e":"🇰🇼","opts":["🇰🇼"]},{"e":"🇰🇾","opts":["🇰🇾"]},{"e":"🇰🇿","opts":["🇰🇿"]},{"e":"🇱🇦","opts":["🇱🇦"]},{"e":"🇱🇧","opts":["🇱🇧"]},{"e":"🇱🇨","opts":["🇱🇨"]},{"e":"🇱🇮","opts":["🇱🇮"]},{"e":"🇱🇰","opts":["🇱🇰"]},{"e":"🇱🇷","opts":["🇱🇷"]},{"e":"🇱🇸","opts":["🇱🇸"]},{"e":"🇱🇹","opts":["🇱🇹"]},{"e":"🇱🇺","opts":["🇱🇺"]},{"e":"🇱🇻","opts":["🇱🇻"]},{"e":"🇱🇾","opts":["🇱🇾"]},{"e":"🇲🇦","opts":["🇲🇦"]},{"e":"🇲🇨","opts":["🇲🇨"]},{"e":"🇲🇩","opts":["🇲🇩"]},{"e":"🇲🇪","opts":["🇲🇪"]},{"e":"🇲🇫","opts":["🇲🇫"]},{"e":"🇲🇬","opts":["🇲🇬"]},{"e":"🇲🇭","opts":["🇲🇭"]},{"e":"🇲🇰","opts":["🇲🇰"]},{"e":"🇲🇱","opts":["🇲🇱"]},{"e":"🇲🇲","opts":["🇲🇲"]},{"e":"🇲🇳","opts":["🇲🇳"]},{"e":"🇲🇴","opts":["🇲🇴"]},{"e":"🇲🇵","opts":["🇲🇵"]},{"e":"🇲🇶","opts":["🇲🇶"]},{"e":"🇲🇷","opts":["🇲🇷"]},{"e":"🇲🇸","opts":["🇲🇸"]},{"e":"🇲🇹","opts":["🇲🇹"]},{"e":"🇲🇺","opts":["🇲🇺"]},{"e":"🇲🇻","opts":["🇲🇻"]},{"e":"🇲🇼","opts":["🇲🇼"]},{"e":"🇲🇽","opts":["🇲🇽"]},{"e":"🇲🇾","opts":["🇲🇾"]},{"e":"🇲🇿","opts":["🇲🇿"]},{"e":"🇳🇦","opts":["🇳🇦"]},{"e":"🇳🇨","opts":["🇳🇨"]},{"e":"🇳🇪","opts":["🇳🇪"]},{"e":"🇳🇫","opts":["🇳🇫"]},{"e":"🇳🇬","opts":["🇳🇬"]},{"e":"🇳🇮","opts":["🇳🇮"]},{"e":"🇳🇱","opts":["🇳🇱"]},{"e":"🇳🇴","opts":["🇳🇴"]},{"e":"🇳🇵","opts":["🇳🇵"]},{"e":"🇳🇷","opts":["🇳🇷"]},{"e":"🇳🇺","opts":["🇳🇺"]},{"e":"🇳🇿","opts":["🇳🇿"]},{"e":"🇴🇲","opts":["🇴🇲"]},{"e":"🇵🇦","opts":["🇵🇦"]},{"e":"🇵🇪","opts":["🇵🇪"]},{"e":"🇵🇫","opts":["🇵🇫"]},{"e":"🇵🇬","opts":["🇵🇬"]},{"e":"🇵🇭","opts":["🇵🇭"]},{"e":"🇵🇰","opts":["🇵🇰"]},{"e":"🇵🇱","opts":["🇵🇱"]},{"e":"🇵🇲","opts":["🇵🇲"]},{"e":"🇵🇳","opts":["🇵🇳"]},{"e":"🇵🇷","opts":["🇵🇷"]},{"e":"🇵🇸","opts":["🇵🇸"]},{"e":"🇵🇹","opts":["🇵🇹"]},{"e":"🇵🇼","opts":["🇵🇼"]},{"e":"🇵🇾","opts":["🇵🇾"]},{"e":"🇶🇦","opts":["🇶🇦"]},{"e":"🇷🇪","opts":["🇷🇪"]},{"e":"🇷🇴","opts":["🇷🇴"]},{"e":"🇷🇸","opts":["🇷🇸"]},{"e":"🇷🇺","opts":["🇷🇺"]},{"e":"🇷🇼","opts":["🇷🇼"]},{"e":"🇸🇦","opts":["🇸🇦"]},{"e":"🇸🇧","opts":["🇸🇧"]},{"e":"🇸🇨","opts":["🇸🇨"]},{"e":"🇸🇩","opts":["🇸🇩"]},{"e":"🇸🇪","opts":["🇸🇪"]},{"e":"🇸🇬","opts":["🇸🇬"]},{"e":"🇸🇭","opts":["🇸🇭"]},{"e":"🇸🇮","opts":["🇸🇮"]},{"e":"🇸🇯","opts":["🇸🇯"]},{"e":"🇸🇰","opts":["🇸🇰"]},{"e":"🇸🇱","opts":["🇸🇱"]},{"e":"🇸🇲","opts":["🇸🇲"]},{"e":"🇸🇳","opts":["🇸🇳"]},{"e":"🇸🇴","opts":["🇸🇴"]},{"e":"🇸🇷","opts":["🇸🇷"]},{"e":"🇸🇸","opts":["🇸🇸"]},{"e":"🇸🇹","opts":["🇸🇹"]},{"e":"🇸🇻","opts":["🇸🇻"]},{"e":"🇸🇽","opts":["🇸🇽"]},{"e":"🇸🇾","opts":["🇸🇾"]},{"e":"🇸🇿","opts":["🇸🇿"]},{"e":"🇹🇦","opts":["🇹🇦"]},{"e":"🇹🇨","opts":["🇹🇨"]},{"e":"🇹🇩","opts":["🇹🇩"]},{"e":"🇹🇫","opts":["🇹🇫"]},{"e":"🇹🇬","opts":["🇹🇬"]},{"e":"🇹🇭","opts":["🇹🇭"]},{"e":"🇹🇯","opts":["🇹🇯"]},{"e":"🇹🇰","opts":["🇹🇰"]},{"e":"🇹🇱","opts":["🇹🇱"]},{"e":"🇹🇲","opts":["🇹🇲"]},{"e":"🇹🇳","opts":["🇹🇳"]},{"e":"🇹🇴","opts":["🇹🇴"]},{"e":"🇹🇷","opts":["🇹🇷"]},{"e":"🇹🇹","opts":["🇹🇹"]},{"e":"🇹🇻","opts":["🇹🇻"]},{"e":"🇹🇼","opts":["🇹🇼"]},{"e":"🇹🇿","opts":["🇹🇿"]},{"e":"🇺🇦","opts":["🇺🇦"]},{"e":"🇺🇬","opts":["🇺🇬"]},{"e":"🇺🇲","opts":["🇺🇲"]},{"e":"🇺🇳","opts":["🇺🇳"]},{"e":"🇺🇸","opts":["🇺🇸"]},{"e":"🇺🇾","opts":["🇺🇾"]},{"e":"🇺🇿","opts":["🇺🇿"]},{"e":"🇻🇦","opts":["🇻🇦"]},{"e":"🇻🇨","opts":["🇻🇨"]},{"e":"🇻🇪","opts":["🇻🇪"]},{"e":"🇻🇬","opts":["🇻🇬"]},{"e":"🇻🇮","opts":["🇻🇮"]},{"e":"🇻🇳","opts":["🇻🇳"]},{"e":"🇻🇺","opts":["🇻🇺"]},{"e":"🇼🇫","opts":["🇼🇫"]},{"e":"🇼🇸","opts":["🇼🇸"]},{"e":"🇽🇰","opts":["🇽🇰"]},{"e":"🇾🇪","opts":["🇾🇪"]},{"e":"🇾🇹","opts":["🇾🇹"]},{"e":"🇿🇦","opts":["🇿🇦"]},{"e":"🇿🇲","opts":["🇿🇲"]},{"e":"🇿🇼","opts":["🇿🇼"]},{"e":"🏴󠁧󠁢󠁥󠁮󠁧󠁿","opts":["🏴󠁧󠁢󠁥󠁮󠁧󠁿"]},{"e":"🏴󠁧󠁢󠁳󠁣󠁴󠁿","opts":["🏴󠁧󠁢󠁳󠁣󠁴󠁿"]},{"e":"🏴󠁧󠁢󠁷󠁬󠁳󠁿","opts":["🏴󠁧󠁢󠁷󠁬󠁳󠁿"]}]}
